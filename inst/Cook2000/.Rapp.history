setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
sourceDir <- function(path, trace = TRUE, ...) {#
   for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {#
      if(trace) cat(nm,":")           #
      source(file.path(path, nm), ...)#
      if(trace) cat("\n")#
   }#
}#
#
sourceDir("../R")#
library(lavaan)#
library(plyr)#
library(reshape2)#
library(ggplot2)#
#
# alternatively: load from GitHub#
#library(devtools)#
#install_github("fSRM", "felice303")#
#library(fSRM)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
======================================================================#
## Load Cook 2000 data set; construct three and four member data sets#
## ======================================================================#
library(foreign)#
library(reshape2)#
dat0 <- read.spss("Cook2000.sav", to.data.frame=TRUE)#
#
# create an indicator variable for the family#
dat0$fam <- 1:nrow(dat0)#
#
# convert to long format#
dat <- melt(dat0, id.vars="fam")#
#
# create indicator variables for actor, partner, and measure ##
dat$actor <- substr(dat$variable, 1, 1)#
dat$partner <- substr(dat$variable, 2, 2)#
dat$v <- substr(dat$variable, 3, 6)#
#
# bring both measures back into columns#
dat.wide <- dcast(dat, fam + actor + partner ~ v, value.var="value")#
#
## --> now we have the correct data format for the fSRM package:#
## each row is one directed relationship with multiple measures in columns#
#
# construct a three-person data set#
dat3 <- dat.wide[dat.wide$actor %in% c("c", "f", "m") & dat.wide$partner %in% c("c", "f", "m"), ]#
#
# four-person data set#
dat4 <- dat.wide#
#
str(dat4)#
colnames(dat4) <- c("family.id", "actor.id", "partner.id", "dep1", "dep2")#
two.indicators <- dat4
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
two.indicators.g <- two.indicators#
two.indicators.g$group <- ifelse(two.indicators.g$family.id <= 104, "A", "B")#
#
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE)#
f4.d
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=FALSE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, diff=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m','y'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1 + 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1 + 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1#
A.y =~ 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1 + 1*y_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1 + 1*y_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1 + 1*y_m_dep1#
P.y =~ 1*c_y_dep1 + 1*f_y_dep1 + 1*m_y_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.c.y =~ 1* c_y_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.f.y =~ 1* f_y_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
R.m.y =~ 1* m_y_dep1#
R.y.c =~ 1* y_c_dep1#
R.y.f =~ 1* y_f_dep1#
R.y.m =~ 1* y_m_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
A.y ~~ P.y#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.c.y ~~ R.y.c#
R.f.m ~~ R.m.f#
R.f.y ~~ R.y.f#
R.m.y ~~ R.y.m#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
c_y_dep1 ~~ 0*c_y_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
f_y_dep1 ~~ 0*f_y_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1#
m_y_dep1 ~~ 0*m_y_dep1#
y_c_dep1 ~~ 0*y_c_dep1#
y_f_dep1 ~~ 0*y_f_dep1#
y_m_dep1 ~~ 0*y_m_dep1 #
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
A.y ~ .means.A.y*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
P.y ~ .means.P.y*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.c.y ~ .means.R.c.y*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.f.y ~ .means.R.f.y*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
R.m.y ~ .means.R.m.y*1#
R.y.c ~ .means.R.y.c*1#
R.y.f ~ .means.R.y.f*1#
R.y.m ~ .means.R.y.m*1#
# set means of observed variables to zero#
c_f_dep1~ 0#
c_m_dep1~ 0#
c_y_dep1~ 0#
f_c_dep1~ 0#
f_m_dep1~ 0#
f_y_dep1~ 0#
m_c_dep1~ 0#
m_f_dep1~ 0#
m_y_dep1~ 0#
y_c_dep1~ 0#
y_f_dep1~ 0#
y_m_dep1~ 0#
#
# set constraints on means for identifiability#
.means.A.c + .means.A.f + .means.A.m + .means.A.y == 0#
.means.P.c + .means.P.f + .means.P.m + .means.P.y == 0#
.means.R.c.f + .means.R.c.m + .means.R.c.y == 0#
.means.R.f.c + .means.R.f.m + .means.R.f.y == 0#
.means.R.m.c + .means.R.m.f + .means.R.m.y == 0#
.means.R.y.c + .means.R.y.f + .means.R.y.m == 0#
.means.R.f.c + .means.R.m.c + .means.R.y.c == 0#
.means.R.c.f + .means.R.m.f + .means.R.y.f == 0#
.means.R.c.m + .means.R.f.m + .means.R.y.m == 0#
.means.R.c.y + .means.R.f.y + .means.R.m.y == 0#
"#
#
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m','y'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1 + 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1 + 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1#
A.y =~ 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1 + 1*y_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1 + 1*y_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1 + 1*y_m_dep1#
P.y =~ 1*c_y_dep1 + 1*f_y_dep1 + 1*m_y_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.c.y =~ 1* c_y_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.f.y =~ 1* f_y_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
R.m.y =~ 1* m_y_dep1#
R.y.c =~ 1* y_c_dep1#
R.y.f =~ 1* y_f_dep1#
R.y.m =~ 1* y_m_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
A.y ~~ P.y#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.c.y ~~ R.y.c#
R.f.m ~~ R.m.f#
R.f.y ~~ R.y.f#
R.m.y ~~ R.y.m#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
c_y_dep1 ~~ 0*c_y_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
f_y_dep1 ~~ 0*f_y_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1#
m_y_dep1 ~~ 0*m_y_dep1#
y_c_dep1 ~~ 0*y_c_dep1#
y_f_dep1 ~~ 0*y_f_dep1#
y_m_dep1 ~~ 0*y_m_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
A.y ~ .means.A.y*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
P.y ~ .means.P.y*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.c.y ~ .means.R.c.y*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.f.y ~ .means.R.f.y*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
R.m.y ~ .means.R.m.y*1#
R.y.c ~ .means.R.y.c*1#
R.y.f ~ .means.R.y.f*1#
R.y.m ~ .means.R.y.m*1#
# set means of observed variables to zero#
# c_f_dep1~ 0#
# c_m_dep1~ 0#
# c_y_dep1~ 0#
# f_c_dep1~ 0#
# f_m_dep1~ 0#
# f_y_dep1~ 0#
# m_c_dep1~ 0#
# m_f_dep1~ 0#
# m_y_dep1~ 0#
# y_c_dep1~ 0#
# y_f_dep1~ 0#
# y_m_dep1~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m + .means.A.y == 0#
# .means.P.c + .means.P.f + .means.P.m + .means.P.y == 0#
# .means.R.c.f + .means.R.c.m + .means.R.c.y == 0#
# .means.R.f.c + .means.R.f.m + .means.R.f.y == 0#
# .means.R.m.c + .means.R.m.f + .means.R.m.y == 0#
# .means.R.y.c + .means.R.y.f + .means.R.y.m == 0#
# .means.R.f.c + .means.R.m.c + .means.R.y.c == 0#
# .means.R.c.f + .means.R.m.f + .means.R.y.f == 0#
# .means.R.c.m + .means.R.f.m + .means.R.y.m == 0#
# .means.R.c.y + .means.R.f.y + .means.R.m.y == 0#
"#
#
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m','y'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1 + 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1 + 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*c_y_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1 + 1*f_y_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1 + 1*m_y_dep1#
A.y =~ 1*y_c_dep1 + 1*y_f_dep1 + 1*y_m_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1 + 1*y_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1 + 1*y_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1 + 1*y_m_dep1#
P.y =~ 1*c_y_dep1 + 1*f_y_dep1 + 1*m_y_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.c.y =~ 1* c_y_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.f.y =~ 1* f_y_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
R.m.y =~ 1* m_y_dep1#
R.y.c =~ 1* y_c_dep1#
R.y.f =~ 1* y_f_dep1#
R.y.m =~ 1* y_m_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
A.y ~~ P.y#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.c.y ~~ R.y.c#
R.f.m ~~ R.m.f#
R.f.y ~~ R.y.f#
R.m.y ~~ R.y.m#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
c_y_dep1 ~~ 0*c_y_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
f_y_dep1 ~~ 0*f_y_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1#
m_y_dep1 ~~ 0*m_y_dep1#
y_c_dep1 ~~ 0*y_c_dep1#
y_f_dep1 ~~ 0*y_f_dep1#
y_m_dep1 ~~ 0*y_m_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
A.y ~ .means.A.y*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
P.y ~ .means.P.y*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.c.y ~ .means.R.c.y*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.f.y ~ .means.R.f.y*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
R.m.y ~ .means.R.m.y*1#
R.y.c ~ .means.R.y.c*1#
R.y.f ~ .means.R.y.f*1#
R.y.m ~ .means.R.y.m*1#
# set means of observed variables to zero#
c_f_dep1~ 0#
c_m_dep1~ 0#
c_y_dep1~ 0#
f_c_dep1~ 0#
f_m_dep1~ 0#
f_y_dep1~ 0#
m_c_dep1~ 0#
m_f_dep1~ 0#
m_y_dep1~ 0#
y_c_dep1~ 0#
y_f_dep1~ 0#
y_m_dep1~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m + .means.A.y == 0#
# .means.P.c + .means.P.f + .means.P.m + .means.P.y == 0#
# .means.R.c.f + .means.R.c.m + .means.R.c.y == 0#
# .means.R.f.c + .means.R.f.m + .means.R.f.y == 0#
# .means.R.m.c + .means.R.m.f + .means.R.m.y == 0#
# .means.R.y.c + .means.R.y.f + .means.R.y.m == 0#
# .means.R.f.c + .means.R.m.c + .means.R.y.c == 0#
# .means.R.c.f + .means.R.m.f + .means.R.y.f == 0#
# .means.R.c.m + .means.R.f.m + .means.R.y.m == 0#
# .means.R.c.y + .means.R.f.y + .means.R.m.y == 0#
"#
#
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/R')
' @title Build lavaan syntax for a Social Relations Model with roles ("Family SRM")#
#'#
#' @description#
#' Build lavaan syntax for a Social Relations Model with roles ("Family SRM"). This function is called by the fSRM function, but can be also #
#'#
#' @details#
#' None.#
#'#
#' @export#
#' @param roles A vector with all role labels.#
#' @param var.id A vector with the variable names of the DV indicators#
#' @param drop In three-member families at least one component has to be dropped. \code{drop} defines which one: "none": drop nothing; "family" - drop family effect; "GR" - drop generalized reciprocities; "actor" - drop actor factors and actor-partner covariances; "partner" - drop partner effects and actor-partner covariances; "default": drop nothing in >= 4 members and drop family effect with 3 members. Although usually not necessary, the drop parameter can also be applied to >= 4 member families.#
#' @param err Defines the type of correlations between error terms. err = "no": no error term correlations - this is the required mode for single indicators. err = "all": If multiple indicators are present, correlate same items BETWEEN raters (e.g., Dyadic Data Analysis, Kenny, Kashy, & Cook, 2000). err = "default": Set err to "no" for single indicators and to "all" for multiple indicators.#
#' @param IGSIM Define intragenerational similarity correlations. Must be a list where the levels of actor.id and partner.id are combined, e.g.: \code{IGSIM=list(c("m", "f"), c("c", "y"))}. Here "m"other and "f"ather are defined as one generation, and "y"ounger and "o"lder as the other generation.#
#' @param self Should self-ratings be included in the analysis (if present in the data set)?#
#' @param selfmode Defines the style how the selfratings are combined with the latent actor and partner effects. If \code{selfmode="cor"} they are correlated (as in REFERENCE), if \code{selfmode="kq"} the k and q paths are calculated (see Kenny & West, 2010)#
#' @param add.variable Not yet fully implemented: Add external variables to the model syntax.#
#' @param ... Additional arguments (not documented yet)#
#' @param means Should the structured means of the SRM factors be calculated?#
#' @param diff Compare groups with the delta method?#
#' @param groupnames Vector with the names of the groups (i.e., the values of the group column in the data set)#
#
#' @references#
#' Kenny, D. A., & West, T. V. (2010). Similarity and Agreement in Self-and Other Perception: A Meta-Analysis. Personality and Social Psychology Review, 14(2), 196-213. doi:10.1177/1088868309353414#
buildSRMSyntaxLatent <-#
function(roles, var.id, self=FALSE, IGSIM = list(), drop="default", err="default", means=FALSE, diff=FALSE, groupnames=NULL,  add.variable=c(), selfmode="cor", ...) {#
	# define defaults for parameters#
	err <- match.arg(err, c("no", "all", "default"))#
	if (err == "default" & length(var.id) == 1) {err <- "no"}#
	if (err == "default" & length(var.id) > 1) {err <- "all"}#
	dots <- list(...)#
#
	# helper function: paste two vectors together, but only if elements are not identical#
	pasteNS <- function(x, y, v="", sep="_", self=FALSE) {#
		if (v[1] == "") {#
			res <- c()#
			for (i in x) {#
				for (j in y) {if (i != j | self==TRUE) {res <- c(res, paste(i,j, sep=sep))}}#
			}#
			return(res)#
		} else {#
			res <- c()#
			for (k in v) {#
				for (i in x) {#
					for (j in y) {if (i != j | self==TRUE) {res <- c(res, paste(i,j,k, sep=sep))}}#
				}#
			}#
			return(res)#
		}#
	}#
#
	# Family effect#
	FE <- paste("# Family effect:\n", style$familyeffect," =~ ", paste("1*", pasteNS(roles, roles, var.id), sep="", collapse=" + "), sep="")#
	if (self == TRUE) {#
		# self factors (not indicators!) should load on family effect, but with free loadings (D. Kenny, Email from June 15, 2012)#
		for (p in roles) {FE <- paste(FE, " + ", paste(style$self, ".", p, sep="", collapse=" + "), sep="")}#
	}#
	# for (a in add.variable) {#
	# 		for (r in roles) {FE <- paste(FE, " + ", r, "_", r, "_", a, sep="")}#
	# 	}#
	# Actor effects#
	AE <- "\n# Actor effects:\n"#
	for (p in roles) {AE <- paste(AE, style$actor, ".", p, " =~ ", paste("1*", pasteNS(p, roles, var.id), sep="", collapse=" + "), "\n", sep="")}#
#
	# Partner effects#
	PE <- "# Partner effects:\n"#
	for (t in roles) {PE <- paste(PE, style$partner, ".", t, " =~ ", paste("1*", pasteNS(roles, t, var.id), sep="", collapse=" + "), "\n", sep="")}#
#
	# Relationship effects#
	RE <- "# Relationship effects:\n"#
	for (p in roles) {#
		for (t in roles) {#
			if (p != t) {RE <- paste(RE, style$relationship, ".", p, ".", t, " =~ ", paste("1*", pasteNS(p, t, var.id), collapse=" + "), "\n", sep="")}#
		}#
	}#
#
	# generalized reciprocity#
	GR <- "# Generalized reciprocity:\n"#
	for (p in roles) {GR <- paste(GR, style$actor, ".", p, " ~~ ", style$partner, ".", p, "\n", sep="")}#
#
	# dyadic reciprocity#
	DR <- "# Dyadic reciprocity:\n"#
	for (p in 1:length(roles)) {#
		for (t in 1:length(roles)) {#
			if ((p < t) & (roles[p] != roles[t])) {#
				DR <- paste(DR, style$relationship, ".", roles[p], ".", roles[t], " ~~ ", style$relationship, ".", roles[t], ".", roles[p], "\n", sep="")#
			}#
		}#
	}#
	## ======================================================================#
	## Define method covariance (correlations between errors)#
	## ======================================================================#
	ERR <- ""#
	# single indicator: set error variance to zero#
	if (length(var.id) == 1 | err == "no") {#
		if (err != "no") warning("For one indicator error variances cannot correlate; setting err to 'no'")#
			M <- pasteNS(roles, roles, var.id, self=self)#
			ERR <- paste(paste0(M, " ~~ 0*", M), collapse="\n")#
	} else {#
		ERR <- ""#
	}#
	if (length(var.id) > 1 & err == "all") {#
		# method correlations: The same items are allowed to correlate#
		# ERR1: Correlate same items BETWEEN ALL RATERS (e.g., DDA)#
		ERR <- "# Method covariance: Correlations among all error terms of the same items:\n"#
		count <- 1#
		for (v in var.id) {#
			M <- pasteNS(roles, roles, v, self=self)#
			for (m1 in 1:length(M)) {#
				for (m2 in 1:length(M)) {#
					if ((m1 < m2) & (M[m1] != M[m2])) {#
						ERR <- paste(ERR, M[m1], " ~~ MF", count, "*", M[m2], "\n", sep="")#
						count <- count + 1#
					}#
				}#
			}#
		}#
	}#
	# TODO: The old within-error correlations - I think we could delete that#
	# if (length(var.id) > 1 & err == "within") {#
# 		# ERR2: Correlate for same items WITHIN RATERS (e.g., Branje et al., 2003, Eichelsheim)#
# 		# define correlations between error terms#
# 		ERR <- "# Method covariance: Correlations among error terms of one item within actors:\n"#
# 		count <- 1#
# 	#
# 	#
# 		for (v in 1:length(var.id)) {#
# 			for (p in 1:length(roles)) {#
# 				for (t1 in 1:length(roles)) {#
# 					for (t2 in 1:length(roles)) {#
# 						if (self == FALSE) {#
# 							if (p != t1 & p != t2 & t1 < t2) {#
# 								ERR <- paste(ERR, pasteNS(roles[p], roles[t1], var.id[v]), " ~~ ERR", count, "*", pasteNS(roles[p], roles[t2], var.id[v]), "\n", sep="")#
# 								count <- count + 1#
# 							}#
# 						} else {#
# 							if (t1 < t2) {#
# 								ERR <- paste(ERR, paste(roles[p], roles[t1], var.id[v], sep="_"), " ~~ ERR", count, "*", paste(roles[p], roles[t2], var.id[v], sep="_"), "\n", sep="")#
# 								count <- count + 1#
# 							}#
# 						}#
# 					}#
# 				}#
# 			}#
# 		}#
# 	}#
	# intragenerational similarity#
	if (length(IGSIM) > 0) {#
		igsim <- "# intragenerational similarity:\n"#
		for (i in 1:length(IGSIM)) {#
			igsim <- paste(igsim, style$actor, ".", IGSIM[[i]][1], " ~~ IGSIMA", i,"*", style$actor, ".", IGSIM[[i]][2], "\n", sep="")#
			igsim <- paste(igsim, style$partner, ".", IGSIM[[i]][1], " ~~ IGSIMP", i,"*", style$partner, ".", IGSIM[[i]][2], "\n", sep="")#
		}#
	}#
	# self-ratings: assumed similarity and self-other agreement#
	if (self == TRUE) {#
		SELF <- "# Build self-rating factors:\n"#
		for (p in roles) {#
				# TODO: hier mit 1* oder ohne? paste("1*", paste(p, p, var.id, sep="_")#
				SELF <- paste(SELF, style$self, ".", p, " =~ ", paste("", paste(p, p, var.id, sep="_"), sep="", collapse=" + "), "\n", sep="")#
		}#
		if (selfmode=="cor") {#
			SELF <- paste(SELF, "\n\n# Assumed similarity:\n")#
			for (p in roles) {SELF <- paste(SELF, style$self, ".", p, " ~~ ", style$actor, ".", p, "\n", sep="")}#
			SELF <- paste(SELF, "\n\n# Self-other-agreement:\n")#
			for (p in roles) {SELF <- paste(SELF, style$self, ".", p, " ~~ ", style$partner, ".", p, "\n", sep="")}#
		}#
		if (selfmode=="kq") {#
			SELF <- paste(SELF, "\n\n# Assumed similarity:\n")#
			for (p in roles) {SELF <- paste(SELF, style$self, ".", p, " ~ ", style$actor, ".", p, "\n", sep="")}#
			SELF <- paste(SELF, "\n\n# Self-other-agreement:\n")#
			for (p in roles) {SELF <- paste(SELF, style$self, ".", p, " ~ ", style$partner, ".", p, "\n", sep="")}#
		}#
	}#
	# any other variables?#
	addv <- ""#
	# for (a in add.variable) {#
	# 	addv <- "\n\n# Add extra variables to model:\n"#
	# 	for (r in roles) {addv <- paste(addv, a, r, " =~ ", r, "_", r, "_", a, "\n", sep="")}#
	# 	addv <- paste(addv, "# Actor effect ~~", a, ":\n")#
	# 	for (r in roles) {addv <- paste(addv, a, r, " ~~ A", r, "\n", sep="")}#
	# 	addv <- paste(addv, "# Partner effect ~~", a, ":\n")#
	# 	for (r in roles) {addv <- paste(addv, a, r, " ~~ P", r, "\n", sep="")}#
	# 	#
	# 	if (self == TRUE) {#
	# 		addv <- paste(addv, "# Self rating ~~", a, ":\n")#
	# 		for (r in roles) {addv <- paste(addv, a, r, " ~~ S", r, "\n", sep="")}#
	# 	}#
	# 	# for (p in roles) {#
	# 	# 	for (t in roles) {#
	# 	# 		if (p != t) {addv <- paste(addv, a, p, " ~~ R", substr(t, 1, 1), substr(p, 1, 1), "\n", sep="")}#
	# 	# 	}#
	# 	# }#
	# 	#
	# }#
## ======================================================================#
## add structured means#
# TODO: Check: should self ratings be included somehow?#
## ======================================================================#
#
SM <- ""#
if (means==TRUE & diff == FALSE) {#
	SM.prefix <- ".means."#
	SM <- ""#
	SM <- "\n\n## Compute structured means\n# Define labels for subsequent constraints\n"#
	SM <- paste(SM, paste(style$familyeffect, " ~ ", SM.prefix, style$familyeffect, "*1\n", sep=""))#
#
	for (p in roles) {SM <- paste(SM, style$actor, ".", p, " ~ ", SM.prefix, style$actor, ".", p, "*1\n", sep="")}#
	for (p in roles) {SM <- paste(SM, style$partner, ".", p, " ~ ", SM.prefix, style$partner, ".", p, "*1\n", sep="")}#
#
	for (p in roles) {#
		for (t in roles) {#
			if (p != t) {SM <- paste(SM, style$relationship, ".", p, ".", t, " ~ ", SM.prefix, style$relationship, ".", p, ".", t, "*1\n", sep="")}#
		}#
	}#
	# if (drop == "family") {#
	# 	SM <- paste(SM, "\n\n# For three person families: set variance of family effect to zero\n")#
	# 	SM <- paste(SM, style$familyeffect, "~~ 0*", style$familyeffect)#
	# }#
	SM <- paste0(SM, "\n\n# set means of observed variables to zero\n")#
	SM <- paste0(SM, paste0(pasteNS(roles, roles, var.id), " ~ 0", collapse="\n"))#
	SM <- paste0(SM, "\n\n# set constraints on means for identifiability\n")#
	 SM <- paste0(SM, paste(paste(SM.prefix, style$actor, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 SM <- paste0(SM, paste(paste(SM.prefix, style$partner, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 for (p in roles) {#
	 	SM <- paste0(SM, paste(paste(SM.prefix, style$relationship, ".", p, ".", roles[roles != p], sep="", collapse=" + "), "== 0\n"))#
	 }#
	 for (p in roles) {#
	 	SM <- paste0(SM, paste(paste(SM.prefix, style$relationship, ".", roles[roles != p], ".", p, sep="", collapse=" + "), "== 0\n"))#
	 }#
}#
## ======================================================================#
## Delta method for group comparisons#
## ======================================================================#
DM <- ""#
if (diff==TRUE) {#
	if (is.null(groupnames)) stop("You must provide the names of the groups in `groupnames`.")#
	DM.prefix <- ".means"#
	DM.var <- ".var"#
	DM <- ""#
	DM <- "\n\n## deltamethod for comparing two groups\n"#
#
	# define new labels for the means#
	DM <- paste(DM, paste(style$familyeffect, " ~ c(", paste0(DM.prefix, groupnames, ".", style$familyeffect, collapse=","), ")*1\n", sep=""))#
#
	for (p in roles) {DM <- paste(DM, style$actor, ".", p, " ~ c(", paste0(DM.prefix, groupnames, ".", style$actor, ".", p, collapse=","), ")*1\n", sep="")}#
	for (p in roles) {DM <- paste(DM, style$partner, ".", p, " ~ c(", paste0(DM.prefix, groupnames, ".", style$partner, ".", p, collapse=","), ")*1\n", sep="")}#
#
	for (p in roles) {#
		for (t in roles) {#
			if (p != t) {DM <- paste(DM, style$relationship, ".", p, ".", t, " ~ c(", paste0(DM.prefix, groupnames, ".", style$relationship, ".", p, ".", t, collapse=","), ")*1\n", sep="")}#
		}#
	}#
	# new labels for the variances#
	DM <- paste(DM, paste("\n# Variances\n"))#
	DM <- paste(DM, paste(style$familyeffect, " ~~ c(", paste0(DM.var, groupnames, ".", style$familyeffect, collapse=","), ")*", style$familyeffect, ifelse(drop=="family", paste0(" + c(0, 0)*", style$familyeffect), ""),"\n", sep=""))#
	for (p in roles) {DM <- paste(DM, style$actor, ".", p, " ~~ c(", paste0(DM.var, groupnames, ".", style$actor, ".", p, collapse=","), ")*", style$actor, ".", p,  ifelse(drop=="actor", paste0(" + c(0, 0)*", style$actor, ".", p), ""),"\n", sep="")}#
	for (p in roles) {DM <- paste(DM, style$partner, ".", p, " ~~ c(", paste0(DM.var, groupnames, ".", style$partner, ".", p, collapse=","), ")*", style$partner, ".", p, ifelse(drop=="partner", paste0(" + c(0, 0)*", style$partner, ".", p), ""),"\n", sep="")}#
#
	for (p in roles) {#
		for (t in roles) {#
			if (p != t) {DM <- paste(DM, style$relationship, ".", p, ".", t, " ~~ c(", paste0(DM.var, groupnames, ".", style$relationship, ".", p, ".", t, collapse=","), ")*", style$relationship, ".", p, ".", t, "\n", sep="")}#
		}#
	}#
	DM <- paste(DM, "\n\n# set means of observed variables to zero\n")#
	DM <- paste(DM, paste(pasteNS(roles, roles, var.id), "~ 0", collapse="\n"))#
	# ---------------------------------------------------------------------#
	# Constraints for identifiability#
	DM <- paste(DM, "\n\n# set constraints on means for identifiability\n")#
	 DM <- paste(DM, paste(paste(DM.prefix, groupnames[1], ".", style$actor, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 DM <- paste(DM, paste(paste(DM.prefix, groupnames[1], ".", style$actor, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 for (p in roles) {#
	 	DM <- paste(DM, paste(paste(DM.prefix, groupnames[1], ".", style$relationship, ".", p, ".", roles[roles != p], sep="", collapse=" + "), "== 0\n"))#
	 }#
	 for (p in roles) {#
	 	DM <- paste(DM, paste(paste(DM.prefix, groupnames[1], ".", style$relationship, ".", roles[roles != p], ".", p, sep="", collapse=" + "), "== 0\n"))#
	 }#
#
	 DM <- paste(DM, paste(paste(DM.prefix, groupnames[2], ".", style$actor, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 DM <- paste(DM, paste(paste(DM.prefix, groupnames[2], ".", style$actor, ".", roles, sep="", collapse=" + "), "== 0\n"))#
	 for (p in roles) {#
	 	DM <- paste(DM, paste(paste(DM.prefix, groupnames[2], ".", style$relationship, ".", p, ".", roles[roles != p], sep="", collapse=" + "), "== 0\n"))#
	 }#
	 for (p in roles) {#
	 	DM <- paste(DM, paste(paste(DM.prefix, groupnames[2], ".", style$relationship, ".", roles[roles != p], ".", p, sep="", collapse=" + "), "== 0\n"))#
	 }#
	 # ---------------------------------------------------------------------#
	 # Defined parameters#
	 DM <- paste(DM, "\n\n# Defined parameters for group comparison (means)\n")#
#
	 DM <- paste(DM, ".meanDiff.", style$familyeffect, " := ", DM.prefix, groupnames[1], ".", style$familyeffect, " - ", DM.prefix, groupnames[2], ".", style$familyeffect, "\n", sep="")#
		for (p in roles) {DM <- paste(DM, ".meanDiff.", style$actor, ".", p, " := ", DM.prefix, groupnames[1], ".", style$actor, ".", p, " - ", DM.prefix, groupnames[2], ".", style$actor, ".", p, "\n", sep="")}#
		for (p in roles) {DM <- paste(DM, ".meanDiff.", style$partner, ".", p, " := ", DM.prefix, groupnames[1], ".", style$partner, ".", p, " - ", DM.prefix, groupnames[2], ".", style$partner, ".", p, "\n", sep="")}		#
 	for (p in roles) {#
 		for (t in roles) {#
 			if (p != t) {DM <- paste(DM, ".meanDiff.", style$relationship, ".", p, ".", t, " := ", DM.prefix, groupnames[1], ".", style$relationship, ".", p, ".", t, " - ", DM.prefix, groupnames[2], ".", style$relationship, ".", p, ".", t, "\n", sep="")}#
 		}#
 	}#
	 DM <- paste(DM, "\n\n# Defined parameters for group comparison (variances)\n")#
#
	 if (drop != "family") {#
		 DM <- paste(DM, ".varDiff.", style$familyeffect, " := ", DM.var, groupnames[1], ".", style$familyeffect, " - ", DM.var, groupnames[2], ".", style$familyeffect, "\n", sep="")#
	 }#
 	if (drop != "actor") {#
		for (p in roles) {DM <- paste(DM, ".varDiff.", style$actor, ".", p, " := ", DM.var, groupnames[1], ".", style$actor, ".", p, " - ", DM.var, groupnames[2], ".", style$actor, ".", p, "\n", sep="")}#
	}#
	if (drop != "partner") {#
		for (p in roles) {DM <- paste(DM, ".varDiff.", style$partner, ".", p, " := ", DM.var, groupnames[1], ".", style$partner, ".", p, " - ", DM.var, groupnames[2], ".", style$partner, ".", p, "\n", sep="")}		#
	}#
		for (p in roles) {#
			for (t in roles) {#
				if (p != t) {DM <- paste(DM, ".varDiff.", style$relationship, ".", p, ".", t, " := ", DM.var, groupnames[1], ".", style$relationship, ".", p, ".", t, " - ", DM.var, groupnames[2], ".", style$relationship, ".", p, ".", t, "\n", sep="")}#
			}#
		}#
}#
## ======================================================================#
## Label variances for easy retrieval#
## ======================================================================#
#
LAB <- "# Define labels for variances\n"#
VAR.prefix <- ".VAR."#
LAB <- paste(LAB, paste(style$familyeffect, " ~ ", VAR.prefix, style$familyeffect, "*", style$familyeffect, "\n", sep=""))#
#
for (p in roles) {LAB <- paste(LAB, style$actor, ".", p, " ~ ", VAR.prefix, style$actor, ".", p, "*", style$actor, ".", p, "\n", sep="")}#
for (p in roles) {LAB <- paste(LAB, style$partner, ".", p, " ~ ", VAR.prefix, style$partner, ".", p, "*", style$partner, ".", p, "\n", sep="")}#
#
for (p in roles) {#
	for (t in roles) {#
		if (p != t) {LAB <- paste(LAB, style$relationship, ".", p, ".", t, " ~ ", VAR.prefix, style$relationship, ".", p, ".", t, "*", style$relationship, ".", p, ".", t, "\n", sep="")}#
	}#
}#
## ======================================================================#
## Set variance of dropped factors to zero#
## Dropping has to be different when diff = TRUE#
## ======================================================================#
#
DROP <- ""#
#
if (diff == FALSE) {#
	if (!drop %in% c("nothing", "GR")) DROP <- "# Dropping factors:\n##################\n"#
	if (drop == "family") {#
		DROP <- paste(DROP, paste0(style$familyeffect, " ~~ 0*", style$familyeffect, "\n"))#
	}#
	if (drop == "actor") {#
		for (p in roles) {#
			DROP <- paste(DROP, style$actor, ".", p, " ~~ 0*", style$actor, ".", p, "\n", sep="")#
		}#
		for (p in roles) {#
			DROP <- paste(DROP, style$actor, ".", p, " ~~ 0*", style$partner, ".", p, "\n", sep="")#
		}#
	}#
	if (drop == "partner") {#
		for (p in roles) {#
			DROP <- paste(DROP, style$partner, ".", p, " ~~ 0*", style$partner, ".", p, "\n", sep="")#
		}#
		for (p in roles) {#
			DROP <- paste(DROP, style$actor, ".", p, " ~~ 0*", style$partner, ".", p, "\n", sep="")#
		}#
	}#
}#
#
## ======================================================================#
## Put everything together#
## ======================================================================#
	## Add internal information about variable names etc.#
	SRM <- "### lavaan syntax for family SRM\n"#
	SRM <- paste(SRM, "### ROLES:'", paste(roles, collapse="','"), "'\n", sep="")#
	SRM <- paste(SRM, "### VARID:'", paste(var.id, collapse="','"), "'\n", sep="")#
	SRM <- paste(SRM, FE, sep="\n")#
	SRM <- paste(SRM, AE, sep="\n")#
	SRM <- paste(SRM, PE, sep="\n")#
	SRM <- paste(SRM, RE, sep="\n")#
	if (!drop %in% c("actor", "partner", "GR"))#
		SRM <- paste(SRM, GR, sep="\n")#
	SRM <- paste(SRM, DR, sep="\n")#
	if (length(IGSIM) > 0) {SRM <- paste(SRM, igsim, sep="\n")}#
	SRM <- paste(SRM, DROP, sep="\n")#
	SRM <- paste(SRM, ERR, sep="\n")#
	if (self == TRUE) {SRM <- paste(SRM, SELF, sep="\n")}#
	if (addv!="") SRM <- paste(SRM, addv)#
	SRM <- paste(SRM, SM)#
	SRM <- paste(SRM, DM)#
	return(SRM)#
}#
# cat(buildSRMSyntaxLatent(c("m", "f", "o", "y"), c("dep1", "dep2")))#
# cat(buildSRMSyntaxLatent(c("m", "f", "o", "y"), c("dep1", "dep2"), means=TRUE, err="no"))#
# cat(buildSRMSyntaxLatent(c("m", "f", "c"), c("dep1", "dep2"), means=TRUE, fe=FALSE))#
# cat(buildSRMSyntaxLatent(c("m", "f", "c"), c("dep1", "dep2"), means=TRUE, fe=FALSE))#
#
#cat(buildSRMSyntaxLatent(c("m", "f", "c"), c("dep1"), fe=FALSE, self=TRUE))
options(error=recover)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE)
ls()
cat(syntax)
cat(syntax)
cat(syntax)
ls()
head(fam)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/R')
m <- lavaan(#
				model		= syntax, #
				data		= fam,#
				std.ov		= FALSE,#
				orthogonal	= TRUE,#
				fixed.x 	= FALSE,#
				int.ov.free	= TRUE,#
				int.lv.free = FALSE,#
				auto.fix.first = FALSE,#
				auto.fix.single = TRUE,#
				auto.var 	= TRUE,#
				auto.cov.lv.x = TRUE,#
				auto.cov.y 	= TRUE, #
				group		= group)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/R')
m <- lavaan(#
				model		= syntax, #
				data		= fam,#
				std.ov		= FALSE,#
				orthogonal	= TRUE,#
				fixed.x 	= FALSE,#
				int.ov.free	= TRUE,#
				int.lv.free = FALSE,#
				auto.fix.first = FALSE,#
				auto.fix.single = TRUE,#
				auto.var 	= TRUE,#
				auto.cov.lv.x = TRUE,#
				auto.cov.y 	= TRUE)
lavaan(model=syntax, data=fam)
sem(model=syntax, data=fam)
cat(syntax)
sessionInfo()
install.packages("lavaan", repos="http://www.da.ugent.be", type="source")
library(lavaan)
sessionInfo()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE)
options(error=NULL)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE, diff=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, group="group", means=TRUE, diff=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f4.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators.g, means=TRUE, group="group", diff=TRUE)#
f4.d
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
two.indicators3.g <- two.indicators#
two.indicators3.g$group <- ifelse(two.indicators3.g$family.id <= 104, "A", "B")#
#
f3.d <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3.g, means=TRUE, group="group", diff=TRUE, drop="family")#
f3.d
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
data(two.groups)#
str(two.groups)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::document()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::document()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::document()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::check()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::check()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::check()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::install()
library(fSRM)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
data(two.groups)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
str(two.groups)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E1 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=two.groups)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E1
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E2 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=two.groups, group="group")#
E2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
Beware: This model takes *really* long ...#
E3 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=two.groups, group="group", means=TRUE, diff=TRUE)#
E3
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
load(four.person)#
#
#------------------------------------------------------------#
# ----  4 family design, one indicator#
#------------------------------------------------------------#
#
s1 <- fSRM(anx ~ actor.id*partner.id | family.id, four.person)#
s1
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
data(four.person)#
#
#------------------------------------------------------------#
# ----  4 family design, one indicator#
#------------------------------------------------------------#
#
s1 <- fSRM(anx ~ actor.id*partner.id | family.id, four.person)#
s1
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s2 <- fSRM(anx ~ actor.id*partner.id | family.id, four.person, means=TRUE)#
s2#
summary(s2$fit)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s3 <- fSRM(anx ~ actor.id*partner.id | family.id, four.person[-1,], IGSIM=list(c("m", "f"), c("c", "y")))#
s3
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
data(three.person)#
s1 <- fSRM(anx1 ~ actor.id*partner.id | family.id, three.person, drop="family")#
s1
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s2 <- fSRM(anx1 ~ actor.id*partner.id | family.id, three.person, drop="actor", means=TRUE)#
s2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s3 <- fSRM(anx1/anx2 ~ actor.id*partner.id | family.id, three.person, drop="family")
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s4  <- fSRM(anx1/anx2 ~ actor.id*partner.id | family.id, three.person, drop="family", means=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/SRMwR-Test')
s2 <- fSRM(anx ~ actor.id*partner.id | family.id, four.person, means=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f3.1.m <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, means=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
data(two.indicators)#
#
# construct a 3-person data set#
two.indicators3 <- two.indicators[two.indicators$actor.id != "y" & two.indicators$partner.id != "y", ]
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
f3.1.m <- fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, means=TRUE)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
.means.A.c + .means.A.f + .means.A.m == 0#
.means.P.c + .means.P.f + .means.P.m == 0#
.means.R.c.f + .means.R.c.m == 0#
.means.R.f.c + .means.R.f.m == 0#
.means.R.m.c + .means.R.m.f == 0#
.means.R.f.c + .means.R.m.c == 0#
.means.R.c.f + .means.R.m.f == 0#
.means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
# c_f_dep1 ~ 0#
# c_m_dep1 ~ 0#
# f_c_dep1 ~ 0#
# f_m_dep1 ~ 0#
# m_c_dep1 ~ 0#
# m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
#  FE ~ .means.FE*1#
# A.c ~ .means.A.c*1#
# A.f ~ .means.A.f*1#
# A.m ~ .means.A.m*1#
# P.c ~ .means.P.c*1#
# P.f ~ .means.P.f*1#
# P.m ~ .means.P.m*1#
# R.c.f ~ .means.R.c.f*1#
# R.c.m ~ .means.R.c.m*1#
# R.f.c ~ .means.R.f.c*1#
# R.f.m ~ .means.R.f.m*1#
# R.m.c ~ .means.R.m.c*1#
# R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
# c_f_dep1 ~ 0#
# c_m_dep1 ~ 0#
# f_c_dep1 ~ 0#
# f_m_dep1 ~ 0#
# m_c_dep1 ~ 0#
# m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/R')
' @title Run a Social Relations Model with roles ("Family SRM")#
#' @aliases fSRM#
#'#
#' @description#
#' Run a Social Relations Model with roles ("Family SRM")#
#'#
#' @details#
#' A model can be rerun with additional syntax using the \code{add} function:#
#' \code{s1 <- fSRM(dep1/dep2 ~ actor*partner | fam, dat2)}#
#' \code{s2 <- add(s1, "Ac ~~ Pm")}#
#' A model can be run with new parameters using the update function:#
#' \code{s1 <- fSRM(dep1/dep2 ~ actor*partner | fam, dat2)}#
#' \code{s2 <- update(s1, diff=TRUE)}#
#'#
#' @export#
#' @param formula A formula that defines the variable names. Should be in one of following formats: (1) Single manifest dependent variable: DV ~ actor.id * partner.id | group.id, (2) Multiple indicators for dependent variable: DV1/DV2/DV3 ~ actor.id * parter.id | group.id.#
#' @param data A data frame with all variables defined by \code{formula}. Must be in long format where each row describes one directed dyadic relationship.#
#' @param drop In three-member families at least one component has to be dropped. \code{drop} defines which one: "none": drop nothing; "family" - drop family effect; "GR" - drop generalized reciprocities; "actor" - drop actor factors and actor-partner covariances; "partner" - drop partner effects and actor-partner covariances; "default": drop nothing in >= 4 members and drop family effect with 3 members. Although usually not necessary, the drop parameter can also be applied to >= 4 member families.#
#' @param add Additional lavaan syntax pasted at the end of the generated model. Can contain, for example, user specified error correlations.#
#' @param IGSIM Define intragenerational similarity correlations. Must be a list where the levels of actor.id and partner.id are combined, e.g.: \code{IGSIM=list(c("m", "f"), c("c", "y"))}. Here "m"other and "f"ather are defined as one generation, and "y"ounger and "o"lder as the other generation.#
#' @param syntax In that variable the user can directly provide a lavaan model syntax. Then no automatical model syntax is generated; it is important that the variable nakes in the formula#
#' @param add.variable Not yet fully implemented: Add external variables to the model syntax.#
#' @param ... Additional arguments passed to the \code{sem} function of \code{lavaan}#
#' @param means Should the structured means of the SRM factors be calculated?#
#' @param group Variable name indicating group membership#
#' @param diff Compare groups with the delta method? You need to specify a group identifier in parameter \code{group}.#
#' @param setZero Should misbehaving variances be set to zero? If "negative", all negative variances are constrained to zero. If "nonsig", all nonsignificant variances are constrained to zero. Please note: The purpose of this function is to reproduce published results; usually it is *not* recommended to set non-significant variances to zero!#
#
## OLD PARAMETERS, NOT CURRENTLY USED#
# @param err Defines the type of correlations between error terms. err = 1: Correlate same items BETWEEN ALL RATERS (e.g., Dyadic Data Analysis, Kenny, Kashy, & Cook, 2000); err = 2: Correlate same items WITHIN RATERS (e.g., Branje et al., 2003, Eichelsheim)#
# @param self Should self-ratings be included in the analysis (if present in the data set)?#
# @param selfmode Defines the style how the selfratings are combined with the latent actor and partner effects. If \code{selfmode="cor"} they are correlated (as in REFERENCE), if \code{selfmode="kq"} the k and q paths are calculated (see Kenny & West, 2010)#
#
#' @references#
#' Kenny, D. A., & West, T. V. (2010). Similarity and Agreement in Self-and Other Perception: A Meta-Analysis. Personality and Social Psychology Review, 14(2), 196-213. doi:10.1177/1088868309353414#
#
fSRM <-#
function(formula=NULL, data, drop="default", add="", means=FALSE, diff=FALSE, IGSIM=list(), add.variable=c(), syntax="", group=NULL, setZero="none", ...) {#
	dots <- list(...)#
	setZero <- match.arg(setZero, c("none", "negative", "nonsig"))#
	# TODO: Re-introduce self-ratings? Preliminarily, fix it to FALSE#
	self <- FALSE#
	# save the function call for use in refitting#
	call <- match.call(expand.dots = TRUE)#
	# Parse the formula#
	lhs <- strsplit(gsub(" ","",as.character(formula)[2], fixed=TRUE), "/", fixed=TRUE)[[1]]#
	rhs <- strsplit(gsub(" ","",as.character(formula)[3], fixed=TRUE),"\\*|\\|", perl=TRUE)[[1]]#
	# Retrieve the variable names from the formula#
	var.id <- lhs#
	actor.id <- rhs[1]#
	partner.id <- rhs[2]#
	group.id <- NULL#
	if (length(rhs)>=3) {#
		group.id <- rhs[3]#
	} else {#
		stop("For SRM with roles a group id has to be defined in the formula (after the | operator).")#
	}#
	# Restructure data format from long to wide#
	fam0 <- list()#
	for (v in c(var.id, add.variable)) {#
		fam0[[v]] <- dcast(data[, c(var.id, actor.id, partner.id, group.id, add.variable)], formula(paste(group.id, "~", actor.id, "+", partner.id)), value.var=v)#
		colnames(fam0[[v]])[-1] <- paste(colnames(fam0[[v]])[-1], v, sep="_")#
	}#
	fam <- merge.rec(fam0, by=group.id)#
	# add group variable (for group comparison)#
	if (!is.null(group)) {#
		g2 <- ddply(data, group.id, function(x) x[1, group])#
		colnames(g2) <- c(group.id, group)#
		fam <- merge(fam, g2, by=group.id)#
	}#
	# remove all-NA columns#
	NAcol <- which(apply(fam, 2, function(x) sum(is.na(x))) == nrow(fam))#
	if(length(NAcol)>0)	{fam <- fam[, -NAcol]}#
	fam <- na.omit(fam)#
	included <- fam[, group.id]#
	roles <- sort(unique(data[, actor.id]))#
	# define defaults for drop#
	drop <- match.arg(drop, c("nothing", "family", "GR", "actor", "partner", "default"))#
	if (drop == "default" & length(roles) == 3 & syntax=="") {#
		message("Three-member families: Dropping family variance per default.")#
		drop <- "family"#
	}#
	if (drop == "default" & length(roles) > 3 & syntax=="") {drop <- "nothing"}#
	# Do some sanity checks#
	if (length(roles) == 3 & drop == "nothing" & means == FALSE) {warning('Data set with 3-member-groups detected - model is not identified. Maybe you should remove the family effect (drop = "family") or one of the reciprocities?')}#
	if (!identical(sort(unique(data[, actor.id])), sort(unique(data[, partner.id])))) {#
		warning("Actor.id and Partner.id have different factor levels; results might be wrong!")#
	}#
	if (diff==TRUE & is.null(group)) stop("For comparing groups with the delta method you have to provide a `group`variable.")#
	if (!is.null(group)) {#
		groupnames <- as.character(unique(fam$group))#
	} else {#
		groupnames <- NULL#
	}#
	# if no syntax is directly provided:#
	if (syntax == "") {#
		syntax0 <- buildSRMSyntaxLatent(roles, var.id, drop=drop, err="default", IGSIM=IGSIM, means=means, diff=diff, groupnames=groupnames, self=self, add.variable=add.variable)#
		syntax <- paste(syntax0, add, sep="\n")#
	} else {#
		print("Model syntax is directly specified; skipping buildfSRMSyntax")#
	}#
	cat(syntax)#
	# suppress some types of lavaan warning#
	withCallingHandlers({	#
		m <- lavaan(#
				model		= syntax, #
				data		= fam,#
				std.ov		= FALSE,#
				orthogonal	= TRUE,#
				fixed.x 	= FALSE,#
				int.ov.free	= TRUE,#
				int.lv.free = FALSE,#
				auto.fix.first = FALSE,#
				auto.fix.single = TRUE,#
				auto.var 	= TRUE,#
				auto.cov.lv.x = TRUE,#
				auto.cov.y 	= TRUE, #
				group		= group, ...)#
		},	  # end of "withCallingHandlers"#
#
		# suppress two types of warning#
		  warning=function(w) {#
		   W <- as.character(w)#
		   if (#
			   grepl("some estimated variances are negative", w$message) |#
			   grepl("covariance matrix of latent variables is not positive definite", w$message)#
 			  ) {invokeRestart("muffleWarning")}#
	})#
	suppressWarnings(#
		SS <- standardizedSolution(m, type="std.all")#
	)#
	res <- list(#
		fit		= m,#
		SS		= SS,#
		syntax	= syntax,#
		roles	= roles,#
		actor.id 	= actor.id,#
		partner.id 	= partner.id,#
		group.id 	= group.id,#
		var.id	= var.id,#
		drop	= drop,#
		means	= means,#
		diff	= diff,#
		group	= group,#
		groupnames = groupnames,#
		IGSIM	= IGSIM,#
		self	= self,#
		call	= call,#
		data	= fam)#
	attr(res, "class") <- "fSRM"#
	# ---------------------------------------------------------------------#
	# After fitting: check, if some variances should be set to zero#
	# TODO: Implement for multiple groups.#
	# FE ~~ c(.varA.FE,.varB.FE)*FE + c(0, NA)*FE#
	if (setZero %in% c("negative", "nonsig")) {#
		if (!is.null(group)) {#
			warning("Automatically setting negative variances to zero does not work yet for multiple groups! Negative variances are *not* set to zero!")#
			return(res)#
		}#
		T <- varComp(res, group=1)#
		if (setZero == "negative") {#
			to.zero <- T$component[which(T$variance < 0)]#
		}#
		if (setZero == "nonsig") {#
			to.zero <- T$component[which(T$p.value > .05)]#
			if (length(to.zero) > 0) {#
				warning("Please note: The purpose of this function is to reproduce published results; usually it is *not* recommended to set non-significant variances to zero!")#
			}#
		}#
		if (length(to.zero) > 0) {#
			cat(paste0("Following variances are ", setZero, " and are constrained to be zero:\n", paste(to.zero, collapse="\n"), "\n\nNow reestimating model..."))#
			add <- paste0("\n\n# Set ", setZero, " variances to zero:\n",#
			paste(gsub(" ~~ ", " ~~ 0*", to.zero, fixed=TRUE), collapse="\n"))#
			res2 <- update(res, add=add, setZero="none")#
			return(res2)#
		} else {#
			return(res)#
		}#
	} else {#
		return(res)#
	}#
}
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
#  FE ~ .means.FE*1#
# A.c ~ .means.A.c*1#
# A.f ~ .means.A.f*1#
# A.m ~ .means.A.m*1#
# P.c ~ .means.P.c*1#
# P.f ~ .means.P.f*1#
# P.m ~ .means.P.m*1#
# R.c.f ~ .means.R.c.f*1#
# R.c.m ~ .means.R.c.m*1#
# R.f.c ~ .means.R.f.c*1#
# R.f.m ~ .means.R.f.m*1#
# R.m.c ~ .means.R.m.c*1#
# R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
# c_f_dep1 ~ 0#
# c_m_dep1 ~ 0#
# f_c_dep1 ~ 0#
# f_m_dep1 ~ 0#
# m_c_dep1 ~ 0#
# m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
# c_f_dep1 ~ 0#
# c_m_dep1 ~ 0#
# f_c_dep1 ~ 0#
# f_m_dep1 ~ 0#
# m_c_dep1 ~ 0#
# m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
 FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
.means.A.c + .means.A.f + .means.A.m == 0#
.means.P.c + .means.P.f + .means.P.m == 0#
.means.R.c.f + .means.R.c.m == 0#
.means.R.f.c + .means.R.f.m == 0#
.means.R.m.c + .means.R.m.f == 0#
.means.R.f.c + .means.R.m.c == 0#
.means.R.c.f + .means.R.m.f == 0#
.means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
FE ~ meansFE*1#
A.c ~ meansA.c*1#
A.f ~ meansA.f*1#
A.m ~ meansA.m*1#
P.c ~ meansP.c*1#
P.f ~ meansP.f*1#
P.m ~ meansP.m*1#
R.c.f ~ meansR.c.f*1#
R.c.m ~ meansR.c.m*1#
R.f.c ~ meansR.f.c*1#
R.f.m ~ meansR.f.m*1#
R.m.c ~ meansR.m.c*1#
R.m.f ~ meansR.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
meansA.c + meansA.f + meansA.m == 0#
meansP.c + meansP.f + meansP.m == 0#
meansR.c.f + meansR.c.m == 0#
meansR.f.c + meansR.f.m == 0#
meansR.m.c + meansR.m.f == 0#
meansR.f.c + meansR.m.c == 0#
meansR.c.f + meansR.m.f == 0#
meansR.c.m + meansR.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
FE ~ .means.FE*FE#
A.c ~ .means.A.c*A.c#
A.f ~ .means.A.f*A.f#
A.m ~ .means.A.m*A.m#
P.c ~ .means.P.c*P.c#
P.f ~ .means.P.f*P.f#
P.m ~ .means.P.m*P.m#
R.c.f ~ .means.R.c.f*R.c.f#
R.c.m ~ .means.R.c.m*R.c.m#
R.f.c ~ .means.R.f.c*R.f.c#
R.f.m ~ .means.R.f.m*R.f.m#
R.m.c ~ .means.R.m.c*R.m.c#
R.m.f ~ .means.R.m.f*R.m.f#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
.means.A.c + .means.A.f + .means.A.m == 0#
.means.P.c + .means.P.f + .means.P.m == 0#
.means.R.c.f + .means.R.c.m == 0#
.means.R.f.c + .means.R.f.m == 0#
.means.R.m.c + .means.R.m.f == 0#
.means.R.f.c + .means.R.m.c == 0#
.means.R.c.f + .means.R.m.f == 0#
.means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
sessionInfo()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
options(error=recover)
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
# .means.A.c + .means.A.f + .means.A.m == 0#
# .means.P.c + .means.P.f + .means.P.m == 0#
# .means.R.c.f + .means.R.c.m == 0#
# .means.R.f.c + .means.R.f.m == 0#
# .means.R.m.c + .means.R.m.f == 0#
# .means.R.f.c + .means.R.m.c == 0#
# .means.R.c.f + .means.R.m.f == 0#
# .means.R.c.m + .means.R.f.m == 0#
"#
#
fSRM(dep1 ~ actor.id*partner.id | family.id, two.indicators3, syntax=s)
ls()
ov.all
ov.names
group
group.label
ordered
data
ov.all
dput(two.indicators3)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Cook2000')
dat <- structure(list(family.id = c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, #
2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, #
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, #
7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, #
10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L, #
12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, #
14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L, #
16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 18L, #
18L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 20L, 20L, #
21L, 21L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 22L, 22L, 23L, #
23L, 23L, 23L, 23L, 23L, 24L, 24L, 24L, 24L, 24L, 24L, 25L, 25L, #
25L, 25L, 25L, 25L, 26L, 26L, 26L, 26L, 26L, 26L, 27L, 27L, 27L, #
27L, 27L, 27L, 28L, 28L, 28L, 28L, 28L, 28L, 29L, 29L, 29L, 29L, #
29L, 29L, 30L, 30L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 31L, 31L, #
31L, 32L, 32L, 32L, 32L, 32L, 32L, 33L, 33L, 33L, 33L, 33L, 33L, #
34L, 34L, 34L, 34L, 34L, 34L, 35L, 35L, 35L, 35L, 35L, 35L, 36L, #
36L, 36L, 36L, 36L, 36L, 37L, 37L, 37L, 37L, 37L, 37L, 38L, 38L, #
38L, 38L, 38L, 38L, 39L, 39L, 39L, 39L, 39L, 39L, 40L, 40L, 40L, #
40L, 40L, 40L, 41L, 41L, 41L, 41L, 41L, 41L, 42L, 42L, 42L, 42L, #
42L, 42L, 43L, 43L, 43L, 43L, 43L, 43L, 44L, 44L, 44L, 44L, 44L, #
44L, 45L, 45L, 45L, 45L, 45L, 45L, 46L, 46L, 46L, 46L, 46L, 46L, #
47L, 47L, 47L, 47L, 47L, 47L, 48L, 48L, 48L, 48L, 48L, 48L, 49L, #
49L, 49L, 49L, 49L, 49L, 50L, 50L, 50L, 50L, 50L, 50L, 51L, 51L, #
51L, 51L, 51L, 51L, 52L, 52L, 52L, 52L, 52L, 52L, 53L, 53L, 53L, #
53L, 53L, 53L, 54L, 54L, 54L, 54L, 54L, 54L, 55L, 55L, 55L, 55L, #
55L, 55L, 56L, 56L, 56L, 56L, 56L, 56L, 57L, 57L, 57L, 57L, 57L, #
57L, 58L, 58L, 58L, 58L, 58L, 58L, 59L, 59L, 59L, 59L, 59L, 59L, #
60L, 60L, 60L, 60L, 60L, 60L, 61L, 61L, 61L, 61L, 61L, 61L, 62L, #
62L, 62L, 62L, 62L, 62L, 63L, 63L, 63L, 63L, 63L, 63L, 64L, 64L, #
64L, 64L, 64L, 64L, 65L, 65L, 65L, 65L, 65L, 65L, 66L, 66L, 66L, #
66L, 66L, 66L, 67L, 67L, 67L, 67L, 67L, 67L, 68L, 68L, 68L, 68L, #
68L, 68L, 69L, 69L, 69L, 69L, 69L, 69L, 70L, 70L, 70L, 70L, 70L, #
70L, 71L, 71L, 71L, 71L, 71L, 71L, 72L, 72L, 72L, 72L, 72L, 72L, #
73L, 73L, 73L, 73L, 73L, 73L, 74L, 74L, 74L, 74L, 74L, 74L, 75L, #
75L, 75L, 75L, 75L, 75L, 76L, 76L, 76L, 76L, 76L, 76L, 77L, 77L, #
77L, 77L, 77L, 77L, 78L, 78L, 78L, 78L, 78L, 78L, 79L, 79L, 79L, #
79L, 79L, 79L, 80L, 80L, 80L, 80L, 80L, 80L, 81L, 81L, 81L, 81L, #
81L, 81L, 82L, 82L, 82L, 82L, 82L, 82L, 83L, 83L, 83L, 83L, 83L, #
83L, 84L, 84L, 84L, 84L, 84L, 84L, 85L, 85L, 85L, 85L, 85L, 85L, #
86L, 86L, 86L, 86L, 86L, 86L, 87L, 87L, 87L, 87L, 87L, 87L, 88L, #
88L, 88L, 88L, 88L, 88L, 89L, 89L, 89L, 89L, 89L, 89L, 90L, 90L, #
90L, 90L, 90L, 90L, 91L, 91L, 91L, 91L, 91L, 91L, 92L, 92L, 92L, #
92L, 92L, 92L, 93L, 93L, 93L, 93L, 93L, 93L, 94L, 94L, 94L, 94L, #
94L, 94L, 95L, 95L, 95L, 95L, 95L, 95L, 96L, 96L, 96L, 96L, 96L, #
96L, 97L, 97L, 97L, 97L, 97L, 97L, 98L, 98L, 98L, 98L, 98L, 98L, #
99L, 99L, 99L, 99L, 99L, 99L, 100L, 100L, 100L, 100L, 100L, 100L, #
101L, 101L, 101L, 101L, 101L, 101L, 102L, 102L, 102L, 102L, 102L, #
102L, 103L, 103L, 103L, 103L, 103L, 103L, 104L, 104L, 104L, 104L, #
104L, 104L, 105L, 105L, 105L, 105L, 105L, 105L, 106L, 106L, 106L, #
106L, 106L, 106L, 107L, 107L, 107L, 107L, 107L, 107L, 108L, 108L, #
108L, 108L, 108L, 108L, 109L, 109L, 109L, 109L, 109L, 109L, 110L, #
110L, 110L, 110L, 110L, 110L, 111L, 111L, 111L, 111L, 111L, 111L, #
112L, 112L, 112L, 112L, 112L, 112L, 113L, 113L, 113L, 113L, 113L, #
113L, 114L, 114L, 114L, 114L, 114L, 114L, 115L, 115L, 115L, 115L, #
115L, 115L, 116L, 116L, 116L, 116L, 116L, 116L, 117L, 117L, 117L, #
117L, 117L, 117L, 118L, 118L, 118L, 118L, 118L, 118L, 119L, 119L, #
119L, 119L, 119L, 119L, 120L, 120L, 120L, 120L, 120L, 120L, 121L, #
121L, 121L, 121L, 121L, 121L, 122L, 122L, 122L, 122L, 122L, 122L, #
123L, 123L, 123L, 123L, 123L, 123L, 124L, 124L, 124L, 124L, 124L, #
124L, 125L, 125L, 125L, 125L, 125L, 125L, 126L, 126L, 126L, 126L, #
126L, 126L, 127L, 127L, 127L, 127L, 127L, 127L, 128L, 128L, 128L, #
128L, 128L, 128L, 129L, 129L, 129L, 129L, 129L, 129L, 130L, 130L, #
130L, 130L, 130L, 130L, 131L, 131L, 131L, 131L, 131L, 131L, 132L, #
132L, 132L, 132L, 132L, 132L, 133L, 133L, 133L, 133L, 133L, 133L, #
134L, 134L, 134L, 134L, 134L, 134L, 135L, 135L, 135L, 135L, 135L, #
135L, 136L, 136L, 136L, 136L, 136L, 136L, 137L, 137L, 137L, 137L, #
137L, 137L, 138L, 138L, 138L, 138L, 138L, 138L, 139L, 139L, 139L, #
139L, 139L, 139L, 140L, 140L, 140L, 140L, 140L, 140L, 141L, 141L, #
141L, 141L, 141L, 141L, 142L, 142L, 142L, 142L, 142L, 142L, 143L, #
143L, 143L, 143L, 143L, 143L, 144L, 144L, 144L, 144L, 144L, 144L, #
145L, 145L, 145L, 145L, 145L, 145L, 146L, 146L, 146L, 146L, 146L, #
146L, 147L, 147L, 147L, 147L, 147L, 147L, 148L, 148L, 148L, 148L, #
148L, 148L, 149L, 149L, 149L, 149L, 149L, 149L, 150L, 150L, 150L, #
150L, 150L, 150L, 151L, 151L, 151L, 151L, 151L, 151L, 152L, 152L, #
152L, 152L, 152L, 152L, 153L, 153L, 153L, 153L, 153L, 153L, 154L, #
154L, 154L, 154L, 154L, 154L, 155L, 155L, 155L, 155L, 155L, 155L, #
156L, 156L, 156L, 156L, 156L, 156L, 157L, 157L, 157L, 157L, 157L, #
157L, 158L, 158L, 158L, 158L, 158L, 158L, 159L, 159L, 159L, 159L, #
159L, 159L, 160L, 160L, 160L, 160L, 160L, 160L, 161L, 161L, 161L, #
161L, 161L, 161L, 162L, 162L, 162L, 162L, 162L, 162L, 163L, 163L, #
163L, 163L, 163L, 163L, 164L, 164L, 164L, 164L, 164L, 164L, 165L, #
165L, 165L, 165L, 165L, 165L, 166L, 166L, 166L, 166L, 166L, 166L, #
167L, 167L, 167L, 167L, 167L, 167L, 168L, 168L, 168L, 168L, 168L, #
168L, 169L, 169L, 169L, 169L, 169L, 169L, 170L, 170L, 170L, 170L, #
170L, 170L, 171L, 171L, 171L, 171L, 171L, 171L, 172L, 172L, 172L, #
172L, 172L, 172L, 173L, 173L, 173L, 173L, 173L, 173L, 174L, 174L, #
174L, 174L, 174L, 174L, 175L, 175L, 175L, 175L, 175L, 175L, 176L, #
176L, 176L, 176L, 176L, 176L, 177L, 177L, 177L, 177L, 177L, 177L, #
178L, 178L, 178L, 178L, 178L, 178L, 179L, 179L, 179L, 179L, 179L, #
179L, 180L, 180L, 180L, 180L, 180L, 180L, 181L, 181L, 181L, 181L, #
181L, 181L, 182L, 182L, 182L, 182L, 182L, 182L, 183L, 183L, 183L, #
183L, 183L, 183L, 184L, 184L, 184L, 184L, 184L, 184L, 185L, 185L, #
185L, 185L, 185L, 185L, 186L, 186L, 186L, 186L, 186L, 186L, 187L, #
187L, 187L, 187L, 187L, 187L, 188L, 188L, 188L, 188L, 188L, 188L, #
189L, 189L, 189L, 189L, 189L, 189L, 190L, 190L, 190L, 190L, 190L, #
190L, 191L, 191L, 191L, 191L, 191L, 191L, 192L, 192L, 192L, 192L, #
192L, 192L, 193L, 193L, 193L, 193L, 193L, 193L, 194L, 194L, 194L, #
194L, 194L, 194L, 195L, 195L, 195L, 195L, 195L, 195L, 196L, 196L, #
196L, 196L, 196L, 196L, 197L, 197L, 197L, 197L, 197L, 197L, 198L, #
198L, 198L, 198L, 198L, 198L, 199L, 199L, 199L, 199L, 199L, 199L, #
200L, 200L, 200L, 200L, 200L, 200L, 201L, 201L, 201L, 201L, 201L, #
201L, 202L, 202L, 202L, 202L, 202L, 202L, 203L, 203L, 203L, 203L, #
203L, 203L, 204L, 204L, 204L, 204L, 204L, 204L, 205L, 205L, 205L, #
205L, 205L, 205L, 206L, 206L, 206L, 206L, 206L, 206L, 207L, 207L, #
207L, 207L, 207L, 207L, 208L, 208L, 208L, 208L, 208L, 208L), #
    actor.id = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, #
    1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, #
    2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c("c", "f", #
    "m", "y"), class = "factor"), partner.id = structure(c(2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, #
    3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, 1L, 2L, 2L, 3L, 1L, 3L, #
    1L, 2L), .Label = c("c", "f", "m", "y"), class = "factor"), #
    dep1 = c(5, 5, 4, 4.33333333333333, 5, 5, 3.66666666666667, #
    3.33333333333333, 4.33333333333333, 3.66666666666667, 4.33333333333333, #
    3.66666666666667, 4.33333333333333, 4, 3, 5, 4, 5, 3.66666666666667, #
    4, 4.33333333333333, 5, 3.66666666666667, 3, 4.33333333333333, #
    4.33333333333333, 5, 5, 4.66666666666667, 5, 4.66666666666667, #
    4.33333333333333, 4, 4.66666666666667, 3.66666666666667, #
    4, 4.33333333333333, 5, 4, 4, 4, 1.66666666666667, 5, 5, #
    3.33333333333333, 5, 4, 5, 4.66666666666667, 5, 4, 2.66666666666667, #
    4.66666666666667, 2.66666666666667, 4, 3.66666666666667, #
    3.33333333333333, 4.66666666666667, 5, 3, 5, 3.66666666666667, #
    5, 5, 3.66666666666667, 5, 3.66666666666667, 3.33333333333333, #
    2.66666666666667, 2.33333333333333, 3, 3.66666666666667, #
    4.66666666666667, 5, 3.66666666666667, 4, 3.66666666666667, #
    3.66666666666667, 4, 4, 5, 5, 4.33333333333333, 2.66666666666667, #
    4.39473684210526, 4.33333333333333, 5, 5, 4.66666666666667, #
    5, 5, 3.66666666666667, 4.66666666666667, 5, 4.66666666666667, #
    4.33333333333333, 4.66666666666667, 4.66666666666667, 5, #
    4.66666666666667, 4, 3, 4.33333333333333, 5, 3.66666666666667, #
    4.66666666666667, 4.33333333333333, 4.33333333333333, 5, #
    5, 4.33333333333333, 4, 5, 4.33333333333333, 5, 4.33333333333333, #
    3.66666666666667, 3.33333333333333, 5, 4.66666666666667, #
    4, 4, 3, 4.33333333333333, 2.66666666666667, 4.66666666666667, #
    4.33333333333333, 5, 2.66666666666667, 5, 4.33333333333333, #
    5, 5, 3.66666666666667, 3.66666666666667, 4.33333333333333, #
    5, 5, 5, 4.66666666666667, 4.33333333333333, 4.33333333333333, #
    5, 5, 4.66666666666667, 4.66666666666667, 4.66666666666667, #
    5, 4.33333333333333, 5, 3.66666666666667, 4.33333333333333, #
    3.66666666666667, 2.66666666666667, 3.33333333333333, 4, #
    4.33333333333333, 5, 3.33333333333333, 5, 5, 4, 4.66666666666667, #
    5, 5, 5, 3.33333333333333, 4.33333333333333, 4.66666666666667, #
    4.33333333333333, 4.33333333333333, 5, 3, 5, 4, 4.66666666666667, #
    3.66666666666667, 4, 3.66666666666667, 4, 4, 4.66666666666667, #
    4.66666666666667, 5, 5, 4.33333333333333, 3.66666666666667, #
    3, 2.33333333333333, 4.66666666666667, 2.66666666666667, #
    4.33333333333333, 5, 5, 4, 2.66666666666667, 4, 3.66666666666667, #
    4, 4, 4.66666666666667, 5, 3.66666666666667, 5, 4.33333333333333, #
    4, 4.33333333333333, 4, 4.66666666666667, 4, 5, 5, 5, 5, #
    4.33333333333333, 5, 4, 4.66666666666667, 3, 3, 4.66666666666667, #
    4, 5, 5, 4.66666666666667, 5, 5, 5, 5, 5, 5, 5, 3.66666666666667, #
    3, 4.33333333333333, 4.33333333333333, 5, 2.33333333333333, #
    4, 2.66666666666667, 3.33333333333333, 4, 4.33333333333333, #
    4.66666666666667, 3.66666666666667, 5, 3.66666666666667, #
    3.66666666666667, 4, 3.33333333333333, 3.66666666666667, #
    4, 3, 2.33333333333333, 2.66666666666667, 5, 2.33333333333333, #
    5, 4.33333333333333, 5, 4.66666666666667, 5, 4, 3, 4.66666666666667, #
    4.73508005822416, 4, 4.33333333333333, 5, 5, 1, 4, 4, 4.33333333333333, #
    3.33333333333333, 1, 5, 3.66666666666667, 3.33333333333333, #
    4.66666666666667, 4, 5, 3.33333333333333, 3.33333333333333, #
    4, 5, 3.66666666666667, 5, 5, 4.66666666666667, 5, 5, 3.66666666666667, #
    4.66666666666667, 5, 5, 3.33333333333333, 4, 5, 5, 4.66666666666667, #
    4.66666666666667, 4.33333333333333, 5, 3.66666666666667, #
    4.33333333333333, 5, 5, 5, 5, 4, 5, 4, 4, 4.33333333333333, #
    4.44444444444444, 5, 5, 3, 4.33333333333333, 4, 3.66666666666667, #
    3.66666666666667, 3.33333333333333, 5, 4, 4, 4.66666666666667, #
    4.33333333333333, 5, 5, 5, 3.66666666666667, 5, 5, 3.66666666666667, #
    4, 5, 4, 4.33333333333333, 5, 5, 4, 5, 4, 4, 5, 5, 4, 4, #
    3.33333333333333, 2, 5, 2, 3.66666666666667, 3.33333333333333, #
    4, 5, 3.33333333333333, 5, 4.66666666666667, 4.66666666666667, #
    4.33333333333333, 4.66666666666667, 4, 4, 3.33333333333333, #
    4.66666666666667, 4, 4.33333333333333, 4.66666666666667, #
    3.66666666666667, 5, 4.66666666666667, 4, 4.66666666666667, #
    4.33333333333333, 4, 5, 3.66666666666667, 3.33333333333333, #
    2.33333333333333, 3.33333333333333, 3.33333333333333, 2, #
    5, 4.33333333333333, 5, 3.33333333333333, 2.33333333333333, #
    4.33333333333333, 3, 2, 2.66666666666667, 4.33333333333333, #
    3.33333333333333, 4.66666666666667, 4.66666666666667, 4, #
    4.66666666666667, 5, 5, 4, 4.33333333333333, 2.33333333333333, #
    4.33333333333333, 2.33333333333333, 4.33333333333333, 4.33333333333333, #
    3, 4, 3, 5, 3.66666666666667, 3.33333333333333, 4, 4, 4, #
    4.33333333333333, 4.66666666666667, 5, 4.66666666666667, #
    4, 4, 4, 3.66666666666667, 4.33333333333333, 5, 3.33333333333333, #
    4.33333333333333, 4, 4.66666666666667, 5, 5, 4.33333333333333, #
    3.33333333333333, 3.33333333333333, 5, 5, 5, 4, 2.33333333333333, #
    2.33333333333333, 4.33333333333333, 5, 5, 4.33333333333333, #
    5, 4.66666666666667, 4.33333333333333, 4, 3, 3, 4.33333333333333, #
    4.33333333333333, 4.66666666666667, 3.66666666666667, 4, #
    3.66666666666667, 3.33333333333333, 3.66666666666667, 2.33333333333333, #
    4.66666666666667, 5, 5, 5, 4, 4, 3.66666666666667, 4.66666666666667, #
    3.66666666666667, 2.66666666666667, 5, 3.33333333333333, #
    5, 5, 4, 5, 4, 4, 3, 5, 3, 3.66666666666667, 3.33333333333333, #
    4.33333333333333, 3.66666666666667, 3.66666666666667, 4.33333333333333, #
    4.66666666666667, 3.66666666666667, 2.66666666666667, 4.33333333333333, #
    5, 4.33333333333333, 4, 4.66666666666667, 5, 4.66666666666667, #
    4.66666666666667, 3.66666666666667, 4, 4, 4.66666666666667, #
    5, 5, 4.66666666666667, 5, 5, 4.66666666666667, 3.33333333333333, #
    4.33333333333333, 5, 5, 4.66666666666667, 5, 3.33333333333333, #
    2.66666666666667, 3.66666666666667, 3.33333333333333, 4, #
    4.33333333333333, 4.33333333333333, 4, 4.66666666666667, #
    5, 2.66666666666667, 4, 5, 4.66666666666667, 5, 3.66666666666667, #
    4.66666666666667, 4, 4, 5, 4.33333333333333, 5, 4.33333333333333, #
    4.66666666666667, 4.66666666666667, 5, 2.33333333333333, #
    4.66666666666667, 2.66666666666667, 4.33333333333333, 2.66666666666667, #
    3.33333333333333, 3, 4.33333333333333, 3.66666666666667, #
    4, 5, 5, 4, 4, 4, 4.66666666666667, 4, 4, 2.66666666666667, #
    5, 3.66666666666667, 3, 4, 4.33333333333333, 2.66666666666667, #
    5, 2.66666666666667, 3.33333333333333, 5, 5, 4.66666666666667, #
    4.66666666666667, 4.33333333333333, 3.33333333333333, 4, #
    3.66666666666667, 5, 5, 4.33333333333333, 5, 4.33333333333333, #
    3.66666666666667, 4.66666666666667, 4.66666666666667, 3.66666666666667, #
    5, 4.66666666666667, 2.33333333333333, 4.66666666666667, #
    4.33333333333333, 5, 5, 5, 1, 4.66666666666667, 2.66666666666667, #
    3, 3.33333333333333, 4, 4.66666666666667, 4, 4.66666666666667, #
    5, 3.33333333333333, 5, 5, 4.33333333333333, 5, 4, 5, 4.66666666666667, #
    3.33333333333333, 4.33333333333333, 4.66666666666667, 5, #
    5, 4.66666666666667, 3.66666666666667, 3.33333333333333, #
    4.66666666666667, 3.33333333333333, 4.66666666666667, 4.33333333333333, #
    5, 4, 4.33333333333333, 3.33333333333333, 3.33333333333333, #
    3, 4.66666666666667, 4, 5, 4, 4, 3.66666666666667, 2.66666666666667, #
    3.66666666666667, 4.33333333333333, 3, 2.66666666666667, #
    3.33333333333333, 2.33333333333333, 3.33333333333333, 5, #
    2.66666666666667, 5, 1.66666666666667, 5, 4, 4.66666666666667, #
    5, 5, 3.33333333333333, 4.66666666666667, 4.33333333333333, #
    5, 5, 5, 4.33333333333333, 4.33333333333333, 3, 4.33333333333333, #
    4, 4, 2, 4, 4, 3.66666666666667, 4, 4, 4, 4, 2, 3.33333333333333, #
    2.33333333333333, 2, 4.66666666666667, 4.66666666666667, #
    3.33333333333333, 4.33333333333333, 2.66666666666667, 5, #
    3.66666666666667, 4, 3.66666666666667, 3.66666666666667, #
    4, 3.66666666666667, 3.66666666666667, 4, 5, 5, 4.33333333333333, #
    3.66666666666667, 5, 4, 2.66666666666667, 5, 3.33333333333333, #
    4.66666666666667, 5, 5, 2.66666666666667, 4.33333333333333, #
    4.66666666666667, 5, 4, 4, 4.33333333333333, 3.66666666666667, #
    5, 4.66666666666667, 5, 5, 4, 4, 3.33333333333333, 5, 5, #
    5, 3.66666666666667, 4.33333333333333, 3.66666666666667, #
    3.33333333333333, 5, 4.66666666666667, 3.66666666666667, #
    4, 4, 4.66666666666667, 4, 4, 2.66666666666667, 3, 2.33333333333333, #
    3, 5, 5, 4.66666666666667, 4.66666666666667, 5, 5, 3.33333333333333, #
    4.66666666666667, 3.33333333333333, 3.66666666666667, 3.33333333333333, #
    5, 1.66666666666667, 4.66666666666667, 4, 4.66666666666667, #
    5, 3, 4, 5, 3.33333333333333, 4.33333333333333, 4.66666666666667, #
    3, 4.33333333333333, 5, 4.66666666666667, 4.33333333333333, #
    5, 4, 3.66666666666667, 4.66666666666667, 3.66666666666667, #
    5, 3.33333333333333, 4.33333333333333, 4, 3.40174672489083, #
    3.66666666666667, 3.33333333333333, 3, 4.66666666666667, #
    4.33333333333333, 4.66666666666667, 3.66666666666667, 4, #
    3, 4, 4, 4, 4.33333333333333, 3.66666666666667, 5, 5, 2, #
    2.66666666666667, 3.33333333333333, 4, 5, 5, 2.66666666666667, #
    4.66666666666667, 3, 3.66666666666667, 3, 2.33333333333333, #
    2.66666666666667, 3.33333333333333, 5, 4.66666666666667, #
    4.33333333333333, 3.33333333333333, 4.33333333333333, 3.66666666666667, #
    3.66666666666667, 4.66666666666667, 3.33333333333333, 4.33333333333333, #
    4.66666666666667, 1.66666666666667, 4.66666666666667, 4.66666666666667, #
    4.66666666666667, 5, 3.39473684210526, 3.33333333333333, #
    4.66666666666667, 5, 4, 4, 4.66666666666667, 5, 4, 4.66666666666667, #
    4.33333333333333, 4.33333333333333, 4.33333333333333, 4.33333333333333, #
    4.66666666666667, 3, 4.33333333333333, 4.33333333333333, #
    4.66666666666667, 5, 5, 5, 5, 5, 4, 5, 3.33333333333333, #
    5, 4.33333333333333, 5, 5, 5, 4.66666666666667, 4.66666666666667, #
    4.66666666666667, 5, 5, 5, 4, 4.66666666666667, 4.33333333333333, #
    5, 4, 2.66666666666667, 4.66666666666667, 3.66666666666667, #
    4, 1, 4.66666666666667, 5, 4.33333333333333, 4, 5, 5, 5, #
    5, 4.66666666666667, 4.33333333333333, 4.33333333333333, #
    3.33333333333333, 4.33333333333333, 4.66666666666667, 2.33333333333333, #
    2.66666666666667, 2.66666666666667, 3, 4, 3.66666666666667, #
    3.33333333333333, 4.66666666666667, 3.66666666666667, 4.66666666666667, #
    1.66666666666667, 1.33333333333333, 5, 5, 3, 4.33333333333333, #
    4.33333333333333, 4, 5, 5, 4.66666666666667, 5, 4, 3.66666666666667, #
    4.33333333333333, 3, 4, 3.33333333333333, 3, 4, 4, 4.33333333333333, #
    4, 5, 2.66666666666667, 4.66666666666667, 4.33333333333333, #
    5, 3.33333333333333, 5, 5, 5, 4.33333333333333, 5, 4.33333333333333, #
    4, 4, 3.66666666666667, 3.66666666666667, 4, 4.66666666666667, #
    5, 4.66666666666667, 5, 3.66666666666667, 4.66666666666667, #
    4.66666666666667, 4.66666666666667, 4, 4, 3.66666666666667, #
    2, 2.66666666666667, 4.66666666666667, 3.33333333333333, #
    4, 3, 5, 4.33333333333333, 4.66666666666667, 5, 5, 3.33333333333333, #
    4.66666666666667, 4.33333333333333, 5, 3.66666666666667, #
    5, 3.33333333333333, 4, 4.66666666666667, 4, 4, 4, 3.66666666666667, #
    5, 3.33333333333333, 5, 4, 4.33333333333333, 3, 4.66666666666667, #
    2.66666666666667, 4.33333333333333, 4.33333333333333, 5, #
    4.33333333333333, 4, 4.33333333333333, 3, 4.66666666666667, #
    5, 3.33333333333333, 5, 4.66666666666667, 3.66666666666667, #
    4, 5, 4.66666666666667, 3.66666666666667, 4, 3.33333333333333, #
    5, 5, 3.66666666666667, 5, 4.33333333333333, 5, 2.66666666666667, #
    4.66666666666667, 3.66666666666667, 2.33333333333333, 3, #
    2, 3.33333333333333, 3.33333333333333, 3, 3.33333333333333, #
    3.33333333333333, 4, 4, 3.66666666666667, 4.66666666666667, #
    5, 3.66666666666667, 3, 4.33333333333333, 4.66666666666667, #
    4.66666666666667, 5, 3.66666666666667, 5, 4, 3.66666666666667, #
    3.66666666666667, 5, 4.33333333333333, 4.66666666666667, #
    2.33333333333333, 3.66666666666667, 3.33333333333333, 3, #
    3.66666666666667, 2.33333333333333, 2, 5, 3.66666666666667, #
    4.66666666666667, 4, 3.33333333333333, 2.66666666666667, #
    4.33333333333333, 2.66666666666667, 2.66666666666667, 5, #
    1.66666666666667, 2, 5, 2.66666666666667, 3.66666666666667, #
    4, 2.33333333333333, 2.33333333333333, 4.66666666666667, #
    5, 3.33333333333333, 4.33333333333333, 2.66666666666667, #
    4.66666666666667, 3.66666666666667, 4.66666666666667, 3.66666666666667, #
    3.66666666666667, 5, 5, 5, 4.33333333333333, 4, 5, 4, 3.33333333333333, #
    2.66666666666667, 2.33333333333333, 4, 3, 3, 3.33333333333333, #
    5, 4.33333333333333, 5, 4.33333333333333, 4.66666666666667, #
    3.33333333333333, 3, 4, 3, 3.33333333333333, 2.66666666666667, #
    3.33333333333333, 3.33333333333333, 3.66666666666667, 4, #
    4.33333333333333, 5, 4.66666666666667, 5, 3.66666666666667, #
    4.33333333333333, 5, 5, 3.33333333333333, 3.33333333333333, #
    4, 1.66666666666667, 3.33333333333333, 2.33333333333333, #
    5, 4.66666666666667, 4, 5, 4, 5, 4, 4.33333333333333, 5, #
    5, 4, 2.66666666666667, 5, 4.33333333333333, 4, 3, 3.66666666666667, #
    3.33333333333333, 4, 4, 3.66666666666667, 4.66666666666667, #
    3.33333333333333, 4.66666666666667, 2.66666666666667, 4.66666666666667, #
    3.00296296296296, 4.33333333333333, 3.66666666666667, 5, #
    5, 5, 4, 4.66666666666667, 5, 2, 3, 2.33333333333333, 2.66666666666667, #
    3.66666666666667, 3, 3.66666666666667, 3.66666666666667, #
    3, 4.33333333333333, 2.66666666666667, 4, 4, 3.33333333333333, #
    3.33333333333333, 4.33333333333333, 4.66666666666667, 4.33333333333333, #
    5, 4.66666666666667, 5, 3.33333333333333, 4, 4, 5, 4.66666666666667, #
    5, 4.33333333333333, 5, 4.33333333333333, 2.66666666666667, #
    5, 5, 3, 4, 4.66666666666667, 4, 4.33333333333333, 2.66666666666667, #
    4, 4.66666666666667, 4, 4.33333333333333, 3, 5, 5, 4.33333333333333, #
    5, 4.33333333333333, 5, 5, 3.66666666666667, 4.33333333333333, #
    5, 4, 3, 2.66666666666667, 3, 4, 3.66666666666667, 3.66666666666667, #
    1.66666666666667, 3.66666666666667, 4.33333333333333, 4, #
    4, 2.66666666666667, 3, 3.33333333333333, 3.33333333333333, #
    3, 3.66666666666667, 2.66666666666667, 5, 3.66666666666667, #
    4, 4, 3.66666666666667, 4.33333333333333, 4, 3, 3.33333333333333, #
    3.66666666666667, 4, 4.33333333333333, 5, 5, 3.66666666666667, #
    3.66666666666667, 5, 5, 4.66666666666667, 3.66666666666667, #
    3.33333333333333, 3.66666666666667, 4, 3.66666666666667, #
    5, 5, 5, 5, 5, 5), dep2 = c(5, 5, 3.66666666666667, 4.33333333333333, #
    5, 5, 4, 2.66666666666667, 4, 4, 4, 3.33333333333333, 5, #
    5, 4.66666666666667, 5, 4.33333333333333, 5, 3.66666666666667, #
    3.66666666666667, 4.66666666666667, 5, 4, 3.66666666666667, #
    5, 5, 4.66666666666667, 4.66666666666667, 4.33333333333333, #
    5, 4, 4, 4, 4, 3.33333333333333, 3.33333333333333, 4.33333333333333, #
    5, 4, 4, 5, 1.66666666666667, 5, 5, 3.66666666666667, 5, #
    5, 3.66666666666667, 4.66666666666667, 5, 4.66666666666667, #
    4, 4.33333333333333, 3.33333333333333, 3.66666666666667, #
    5, 4.33333333333333, 5, 5, 3, 5, 5, 5, 5, 5, 5, 3, 3.66666666666667, #
    3.33333333333333, 3.69185185185185, 3, 3.33333333333333, #
    4.66666666666667, 5, 3.33333333333333, 4, 3.66666666666667, #
    3.66666666666667, 5, 4.66666666666667, 5, 5, 3, 3.33333333333333, #
    4.33333333333333, 4.66666666666667, 5, 5, 4.66666666666667, #
    5, 5, 5, 3.66666666666667, 4.66666666666667, 4.33333333333333, #
    4.66666666666667, 4.66666666666667, 5, 4.66666666666667, #
    4.66666666666667, 4, 2, 3.66666666666667, 4.66666666666667, #
    4, 3.66666666666667, 3.66666666666667, 4.66666666666667, #
    4.33333333333333, 5, 4.33333333333333, 4, 5, 3.66666666666667, #
    5, 3, 5, 1.66666666666667, 4.65217391304348, 3.33333333333333, #
    4, 4, 3.33333333333333, 4, 3.33333333333333, 5, 5, 5, 3.66666666666667, #
    5, 2, 5, 5, 3.66666666666667, 5, 4.66666666666667, 5, 5, #
    3.66666666666667, 4, 4.33333333333333, 4.33333333333333, #
    4.66666666666667, 5, 4.33333333333333, 4.33333333333333, #
    3.66666666666667, 5, 4.66666666666667, 5, 3, 4.66666666666667, #
    3.66666666666667, 3, 3.33333333333333, 3.66666666666667, #
    5, 3.66666666666667, 5, 5, 5, 3.66666666666667, 4.66666666666667, #
    5, 4.66666666666667, 4.33333333333333, 3, 5, 4.66666666666667, #
    4.33333333333333, 4, 3, 2.33333333333333, 5, 4, 4.33333333333333, #
    3, 3.66666666666667, 3.66666666666667, 3.66666666666667, #
    4, 5, 3.33333333333333, 5, 4.66666666666667, 4, 3.66666666666667, #
    3.66666666666667, 2.66666666666667, 4.66666666666667, 2.66666666666667, #
    4, 4.66666666666667, 4.33333333333333, 4, 3, 4, 4, 4, 4, #
    5, 5, 5, 5, 3.66666666666667, 3.33333333333333, 4.33333333333333, #
    4.66666666666667, 4.33333333333333, 4, 5, 5, 5, 5, 5, 5, #
    3.66666666666667, 4.33333333333333, 3, 3.66666666666667, #
    4.66666666666667, 3.66666666666667, 5, 4.66666666666667, #
    4.66666666666667, 5, 5, 5, 5, 5, 5, 5, 3, 3, 4.66666666666667, #
    4.66666666666667, 5, 3.66666666666667, 5, 3.33333333333333, #
    4, 4, 4, 5, 4.33333333333333, 5, 4.33333333333333, 4.33333333333333, #
    5, 4.66666666666667, 4.33333333333333, 2.66666666666667, #
    1.33333333333333, 3, 3.33333333333333, 5, 3, 3.66666666666667, #
    3.66666666666667, 5, 3.66666666666667, 5, 4, 4.33333333333333, #
    5, 4.66666666666667, 5, 4, 5, 5, 3, 4.33333333333333, 5, #
    3, 4.33333333333333, 1, 5, 5, 4.66666666666667, 5, 4.33333333333333, #
    5, 3.33333333333333, 3, 5, 5, 3, 5, 5, 5, 5, 5, 3, 4.33333333333333, #
    5, 5, 4.33333333333333, 4, 5, 5, 4.33333333333333, 4.66666666666667, #
    3, 5, 4.33333333333333, 4.33333333333333, 5, 5, 5, 5, 4, #
    4.33333333333333, 4, 4.33333333333333, 4, 4, 5, 5, 2.66666666666667, #
    4, 4, 4.07174887892377, 4.33333333333333, 3, 5, 4.33333333333333, #
    3.66666666666667, 4.33333333333333, 4.66666666666667, 5, #
    5, 5, 5, 5, 5, 3.33333333333333, 3.66666666666667, 5, 4.66666666666667, #
    5, 5, 5, 4.66666666666667, 5, 3.66666666666667, 3.66666666666667, #
    4.66666666666667, 5, 3.66666666666667, 5, 3.66666666666667, #
    2.66666666666667, 5, 2.66666666666667, 2, 2.66666666666667, #
    3.66666666666667, 3.66666666666667, 3.33333333333333, 5, #
    5, 5, 4.66666666666667, 4.33333333333333, 3.66666666666667, #
    4, 3.66666666666667, 5, 4, 4.66666666666667, 4.66666666666667, #
    3.66666666666667, 4.33333333333333, 4.66666666666667, 4, #
    4, 4, 4.66666666666667, 3.66666666666667, 4, 3.33333333333333, #
    3, 3, 3, 3.66666666666667, 5, 4, 5, 3.33333333333333, 3.66666666666667, #
    4, 4, 2, 3.33333333333333, 5, 4.66666666666667, 4.66666666666667, #
    4.66666666666667, 4.66666666666667, 5, 5, 5, 3.33333333333333, #
    4, 3.33333333333333, 2.33333333333333, 2.33333333333333, #
    4.66666666666667, 4, 3.66666666666667, 4, 3, 4.33333333333333, #
    3, 5, 5, 4.33333333333333, 4.33333333333333, 4.33333333333333, #
    5, 5, 4.66666666666667, 3.66666666666667, 4.66666666666667, #
    4, 4, 4, 5, 4, 4.33333333333333, 4, 4.33333333333333, 5, #
    5, 4, 3.33333333333333, 3.66666666666667, 5, 5, 5, 4.66666666666667, #
    2.66666666666667, 3, 2.66666666666667, 5, 5, 5, 5, 4.66666666666667, #
    5, 4, 4.66666666666667, 3.33333333333333, 4.66666666666667, #
    3.66666666666667, 4.66666666666667, 3, 3.33333333333333, #
    3.66666666666667, 3.66666666666667, 3.66666666666667, 3, #
    5, 5, 5, 5, 5, 5, 3.66666666666667, 4, 4.66666666666667, #
    3.66666666666667, 5, 3.33333333333333, 5, 5, 4, 5, 3.66666666666667, #
    4, 4.33333333333333, 5, 3.33333333333333, 4.66666666666667, #
    4, 4, 4, 3.66666666666667, 3.66666666666667, 3, 3.33333333333333, #
    2.66666666666667, 4.66666666666667, 5, 4.66666666666667, #
    3.66666666666667, 4.66666666666667, 5, 4, 4.33333333333333, #
    3.66666666666667, 4.33333333333333, 4, 4, 5, 5, 5, 5, 4.66666666666667, #
    4.66666666666667, 4.33333333333333, 4.66666666666667, 4.66666666666667, #
    5, 4, 4.33333333333333, 2.66666666666667, 3, 2, 2.66666666666667, #
    4, 4.33333333333333, 4, 3.66666666666667, 5, 5, 2.66666666666667, #
    4, 3.66666666666667, 4.66666666666667, 5, 4.33333333333333, #
    5, 4, 5, 5, 4.66666666666667, 5, 3.66666666666667, 5, 4.66666666666667, #
    5, 3.33333333333333, 5, 3.33333333333333, 4, 2, 3, 2.33333333333333, #
    3.66666666666667, 3.66666666666667, 4.33333333333333, 5, #
    4.33333333333333, 4.66666666666667, 3.66666666666667, 4, #
    4.66666666666667, 3, 4, 4.33333333333333, 5, 3.33333333333333, #
    4.33333333333333, 4.33333333333333, 4.66666666666667, 2.33333333333333, #
    5, 3, 3.33333333333333, 5, 5, 3.33333333333333, 3.33333333333333, #
    4.33333333333333, 4, 4, 4, 5, 5, 4, 5, 5, 4.33333333333333, #
    4.66666666666667, 5, 3, 5, 5, 2, 4.33333333333333, 3.66666666666667, #
    5, 5, 3.33333333333333, 1, 4.33333333333333, 2.66666666666667, #
    3, 2.66666666666667, 4, 4.66666666666667, 4, 5, 4.66666666666667, #
    4.33333333333333, 5, 3.66666666666667, 3.66666666666667, #
    5, 4, 5, 4, 4, 4.66666666666667, 5, 5, 5, 4.66666666666667, #
    3, 3.66666666666667, 5, 3, 4, 5, 5, 3.33333333333333, 3.33333333333333, #
    3.66666666666667, 3, 3.66666666666667, 4.66666666666667, #
    5, 5, 4.33333333333333, 3.66666666666667, 3.33333333333333, #
    3.33333333333333, 4.66666666666667, 4, 3, 2.66666666666667, #
    3, 2.66666666666667, 3, 5, 4, 5, 2, 5, 4, 5, 3.66666666666667, #
    3.66666666666667, 3, 4.33333333333333, 4.33333333333333, #
    5, 5, 4, 4.33333333333333, 5, 3.66666666666667, 4, 4, 4, #
    1.66666666666667, 3, 4, 4.66666666666667, 3.66666666666667, #
    4.33333333333333, 3.33333333333333, 3.66666666666667, 2, #
    3.66666666666667, 2, 1.66666666666667, 5, 5, 3, 5, 4.33333333333333, #
    5, 4, 4, 3, 4.33333333333333, 3.33333333333333, 4, 3.33333333333333, #
    3.33333333333333, 5, 5, 4.31884057971014, 5, 5, 4, 3.66666666666667, #
    5, 3.33333333333333, 5, 5, 5, 3, 5, 5, 5, 4, 3.77391304347826, #
    4.66666666666667, 4, 4.33333333333333, 5, 5, 5, 5, 5, 3.33333333333333, #
    4.33333333333333, 5, 4.71052631578947, 3.66666666666667, #
    4.33333333333333, 3.31884057971014, 3, 5, 5, 4, 4, 3.66666666666667, #
    5, 4, 4.71052631578947, 2.66666666666667, 3.33333333333333, #
    1.66666666666667, 3.33333333333333, 5, 5, 5, 5, 5, 5, 2.66666666666667, #
    3.33333333333333, 2.66666666666667, 4.66666666666667, 3, #
    5, 2, 4.66666666666667, 3.66666666666667, 4.33333333333333, #
    5, 4, 4.33333333333333, 5, 4.66666666666667, 4, 4.66666666666667, #
    3.66666666666667, 4.66666666666667, 5, 4.33333333333333, #
    4.66666666666667, 4.66666666666667, 3.66666666666667, 5, #
    5, 4, 4.66666666666667, 3.66666666666667, 5, 3.66666666666667, #
    2.33333333333333, 3.66666666666667, 4.73841554559043, 2.66666666666667, #
    5, 4, 4.66666666666667, 3.66666666666667, 3.66666666666667, #
    3.66666666666667, 3, 4, 4, 4.66666666666667, 5, 3.66666666666667, #
    5, 1, 4, 4, 4, 4.66666666666667, 5, 3.66666666666667, 5, #
    3, 4, 3, 2.66666666666667, 3, 4, 5, 5, 4, 3, 3.66666666666667, #
    3.66666666666667, 4, 4.66666666666667, 3.66666666666667, #
    4.66666666666667, 5, 3, 4.66666666666667, 4.66666666666667, #
    4.66666666666667, 5, 3, 3.33333333333333, 4, 5, 4, 4, 3.66666666666667, #
    4.66666666666667, 3.66666666666667, 3.66666666666667, 4.33333333333333, #
    5, 4, 4.33333333333333, 4.66666666666667, 2.33333333333333, #
    4, 4, 4.66666666666667, 5, 5, 5, 5, 5, 3.66666666666667, #
    5, 3.33333333333333, 5, 4.66666666666667, 5, 5, 5, 4.66666666666667, #
    4, 5, 5, 5, 5, 4, 4.66666666666667, 4.33333333333333, 5, #
    4, 1.66666666666667, 4.33333333333333, 4.07174887892377, #
    5, 1, 5, 5, 4, 4, 4.66666666666667, 5, 5, 5, 5, 4.33333333333333, #
    4.66666666666667, 4.66666666666667, 4.33333333333333, 3.33333333333333, #
    4, 3.66666666666667, 3, 3, 3.66666666666667, 3.66666666666667, #
    3, 5, 2.33333333333333, 4.66666666666667, 3.66666666666667, #
    2.66666666666667, 5, 5, 3, 5, 4, 3.66666666666667, 3.66666666666667, #
    4.66666666666667, 5, 5, 4.66666666666667, 3.66666666666667, #
    3.66666666666667, 2, 4, 3, 3, 4.37719298245614, 4, 4.66666666666667, #
    3.33333333333333, 5, 3.33333333333333, 4.33333333333333, #
    4, 5, 4.66666666666667, 4.66666666666667, 5, 5, 4.33333333333333, #
    3.66666666666667, 4, 4.33333333333333, 4, 5, 3.66666666666667, #
    3.66666666666667, 4.66666666666667, 4, 4.33333333333333, #
    5, 4, 4.66666666666667, 4.33333333333333, 4.33333333333333, #
    4.33333333333333, 4, 4.66666666666667, 1.33333333333333, #
    3, 4.33333333333333, 3.66666666666667, 4.33333333333333, #
    3.66666666666667, 5, 3.33333333333333, 4.66666666666667, #
    4.66666666666667, 5, 3.66666666666667, 5, 4.33333333333333, #
    5, 3.33333333333333, 4.66666666666667, 3.33333333333333, #
    4, 5, 3.66666666666667, 4.33333333333333, 4, 3.66666666666667, #
    3.66666666666667, 4.33333333333333, 4.66666666666667, 4.33333333333333, #
    3.66666666666667, 2.33333333333333, 4.33333333333333, 2.33333333333333, #
    4.33333333333333, 4.33333333333333, 4.66666666666667, 4, #
    4, 4, 4, 4.66666666666667, 5, 5, 5, 4.66666666666667, 4.33333333333333, #
    4, 5, 3.33333333333333, 3.66666666666667, 4.66666666666667, #
    5, 5, 5, 3.33333333333333, 4.66666666666667, 4.33333333333333, #
    5, 3.66666666666667, 4, 3.66666666666667, 1.33333333333333, #
    4, 2.66666666666667, 3, 3.66666666666667, 2.66666666666667, #
    3.66666666666667, 4, 5, 5, 4.33333333333333, 5, 5, 4, 2, #
    4.33333333333333, 5, 4.66666666666667, 5, 4.33333333333333, #
    5, 4, 4, 3, 4.66666666666667, 4.33333333333333, 4.66666666666667, #
    2.66666666666667, 4.66666666666667, 3.33333333333333, 4.33333333333333, #
    4, 2.33333333333333, 2.33333333333333, 5, 4, 4.66666666666667, #
    4.33333333333333, 3.66666666666667, 1.33333333333333, 4.33333333333333, #
    2.66666666666667, 4, 5, 1.66666666666667, 2, 4.66666666666667, #
    3, 3.33333333333333, 4, 2, 3.66666666666667, 5, 3.66666666666667, #
    3.33333333333333, 4.66666666666667, 2.66666666666667, 4.66666666666667, #
    5, 5, 5, 5, 5, 5, 5, 4.33333333333333, 4, 4.66666666666667, #
    3.66666666666667, 2.66666666666667, 2.33333333333333, 2.33333333333333, #
    3.33333333333333, 3, 2, 3.66666666666667, 5, 3, 5, 3, 4.66666666666667, #
    3.66666666666667, 2.66666666666667, 5, 3, 3.33333333333333, #
    4, 3.66666666666667, 3.66666666666667, 4, 3.66666666666667, #
    3.65217391304348, 4.33333333333333, 5, 5, 3, 4.33333333333333, #
    5, 5, 4, 3.66666666666667, 2.66666666666667, 1, 3.33333333333333, #
    1, 4.66666666666667, 4.66666666666667, 4.33333333333333, #
    5, 3.66666666666667, 5, 3.33333333333333, 4, 3.66666666666667, #
    5, 4, 2.66666666666667, 5, 4.66666666666667, 3.33333333333333, #
    3.33333333333333, 4, 4.33333333333333, 3.66666666666667, #
    4, 2.33333333333333, 4.66666666666667, 3, 4.33333333333333, #
    3.33333333333333, 5, 2.71259259259259, 4, 3.33333333333333, #
    5, 4.66666666666667, 5, 3, 2.33333333333333, 5, 2.66666666666667, #
    1.33333333333333, 1, 2.66666666666667, 4, 1.66666666666667, #
    1.66666666666667, 3.33333333333333, 3.33333333333333, 4.33333333333333, #
    2.33333333333333, 4, 3.33333333333333, 4.33333333333333, #
    3, 4, 4.66666666666667, 4, 5, 4, 3.66666666666667, 3.33333333333333, #
    4, 3.66666666666667, 4.66666666666667, 4.66666666666667, #
    5, 4.33333333333333, 4.33333333333333, 4, 3.33333333333333, #
    5, 5, 4, 4.66666666666667, 5, 3.33333333333333, 4.33333333333333, #
    4.66666666666667, 4, 4.66666666666667, 3.33333333333333, #
    5, 3, 4.66666666666667, 5, 4.66666666666667, 5, 3.66666666666667, #
    4.00724637681159, 5, 3.66666666666667, 4.33333333333333, #
    4.33333333333333, 5, 3, 3, 3, 3.66666666666667, 5, 4.33333333333333, #
    3, 4, 4.33333333333333, 4, 4, 3.33333333333333, 2.33333333333333, #
    3.33333333333333, 3.33333333333333, 3.33333333333333, 3.66666666666667, #
    5, 4.66666666666667, 4.66666666666667, 4, 4, 4, 3.33333333333333, #
    3.33333333333333, 3, 4, 4, 4.66666666666667, 5, 5, 5, 3.33333333333333, #
    4.33333333333333, 5, 4.66666666666667, 4.33333333333333, #
    4, 3, 3.66666666666667, 4.33333333333333, 4.66666666666667, #
    5, 5, 5, 5, 5, 4.66666666666667)), .Names = c("family.id", #
"actor.id", "partner.id", "dep1", "dep2"), row.names = c(1L, #
2L, 4L, 5L, 7L, 8L, 13L, 14L, 16L, 17L, 19L, 20L, 25L, 26L, 28L, #
29L, 31L, 32L, 37L, 38L, 40L, 41L, 43L, 44L, 49L, 50L, 52L, 53L, #
55L, 56L, 61L, 62L, 64L, 65L, 67L, 68L, 73L, 74L, 76L, 77L, 79L, #
80L, 85L, 86L, 88L, 89L, 91L, 92L, 97L, 98L, 100L, 101L, 103L, #
104L, 109L, 110L, 112L, 113L, 115L, 116L, 121L, 122L, 124L, 125L, #
127L, 128L, 133L, 134L, 136L, 137L, 139L, 140L, 145L, 146L, 148L, #
149L, 151L, 152L, 157L, 158L, 160L, 161L, 163L, 164L, 169L, 170L, #
172L, 173L, 175L, 176L, 181L, 182L, 184L, 185L, 187L, 188L, 193L, #
194L, 196L, 197L, 199L, 200L, 205L, 206L, 208L, 209L, 211L, 212L, #
217L, 218L, 220L, 221L, 223L, 224L, 229L, 230L, 232L, 233L, 235L, #
236L, 241L, 242L, 244L, 245L, 247L, 248L, 253L, 254L, 256L, 257L, #
259L, 260L, 265L, 266L, 268L, 269L, 271L, 272L, 277L, 278L, 280L, #
281L, 283L, 284L, 289L, 290L, 292L, 293L, 295L, 296L, 301L, 302L, #
304L, 305L, 307L, 308L, 313L, 314L, 316L, 317L, 319L, 320L, 325L, #
326L, 328L, 329L, 331L, 332L, 337L, 338L, 340L, 341L, 343L, 344L, #
349L, 350L, 352L, 353L, 355L, 356L, 361L, 362L, 364L, 365L, 367L, #
368L, 373L, 374L, 376L, 377L, 379L, 380L, 385L, 386L, 388L, 389L, #
391L, 392L, 397L, 398L, 400L, 401L, 403L, 404L, 409L, 410L, 412L, #
413L, 415L, 416L, 421L, 422L, 424L, 425L, 427L, 428L, 433L, 434L, #
436L, 437L, 439L, 440L, 445L, 446L, 448L, 449L, 451L, 452L, 457L, #
458L, 460L, 461L, 463L, 464L, 469L, 470L, 472L, 473L, 475L, 476L, #
481L, 482L, 484L, 485L, 487L, 488L, 493L, 494L, 496L, 497L, 499L, #
500L, 505L, 506L, 508L, 509L, 511L, 512L, 517L, 518L, 520L, 521L, #
523L, 524L, 529L, 530L, 532L, 533L, 535L, 536L, 541L, 542L, 544L, #
545L, 547L, 548L, 553L, 554L, 556L, 557L, 559L, 560L, 565L, 566L, #
568L, 569L, 571L, 572L, 577L, 578L, 580L, 581L, 583L, 584L, 589L, #
590L, 592L, 593L, 595L, 596L, 601L, 602L, 604L, 605L, 607L, 608L, #
613L, 614L, 616L, 617L, 619L, 620L, 625L, 626L, 628L, 629L, 631L, #
632L, 637L, 638L, 640L, 641L, 643L, 644L, 649L, 650L, 652L, 653L, #
655L, 656L, 661L, 662L, 664L, 665L, 667L, 668L, 673L, 674L, 676L, #
677L, 679L, 680L, 685L, 686L, 688L, 689L, 691L, 692L, 697L, 698L, #
700L, 701L, 703L, 704L, 709L, 710L, 712L, 713L, 715L, 716L, 721L, #
722L, 724L, 725L, 727L, 728L, 733L, 734L, 736L, 737L, 739L, 740L, #
745L, 746L, 748L, 749L, 751L, 752L, 757L, 758L, 760L, 761L, 763L, #
764L, 769L, 770L, 772L, 773L, 775L, 776L, 781L, 782L, 784L, 785L, #
787L, 788L, 793L, 794L, 796L, 797L, 799L, 800L, 805L, 806L, 808L, #
809L, 811L, 812L, 817L, 818L, 820L, 821L, 823L, 824L, 829L, 830L, #
832L, 833L, 835L, 836L, 841L, 842L, 844L, 845L, 847L, 848L, 853L, #
854L, 856L, 857L, 859L, 860L, 865L, 866L, 868L, 869L, 871L, 872L, #
877L, 878L, 880L, 881L, 883L, 884L, 889L, 890L, 892L, 893L, 895L, #
896L, 901L, 902L, 904L, 905L, 907L, 908L, 913L, 914L, 916L, 917L, #
919L, 920L, 925L, 926L, 928L, 929L, 931L, 932L, 937L, 938L, 940L, #
941L, 943L, 944L, 949L, 950L, 952L, 953L, 955L, 956L, 961L, 962L, #
964L, 965L, 967L, 968L, 973L, 974L, 976L, 977L, 979L, 980L, 985L, #
986L, 988L, 989L, 991L, 992L, 997L, 998L, 1000L, 1001L, 1003L, #
1004L, 1009L, 1010L, 1012L, 1013L, 1015L, 1016L, 1021L, 1022L, #
1024L, 1025L, 1027L, 1028L, 1033L, 1034L, 1036L, 1037L, 1039L, #
1040L, 1045L, 1046L, 1048L, 1049L, 1051L, 1052L, 1057L, 1058L, #
1060L, 1061L, 1063L, 1064L, 1069L, 1070L, 1072L, 1073L, 1075L, #
1076L, 1081L, 1082L, 1084L, 1085L, 1087L, 1088L, 1093L, 1094L, #
1096L, 1097L, 1099L, 1100L, 1105L, 1106L, 1108L, 1109L, 1111L, #
1112L, 1117L, 1118L, 1120L, 1121L, 1123L, 1124L, 1129L, 1130L, #
1132L, 1133L, 1135L, 1136L, 1141L, 1142L, 1144L, 1145L, 1147L, #
1148L, 1153L, 1154L, 1156L, 1157L, 1159L, 1160L, 1165L, 1166L, #
1168L, 1169L, 1171L, 1172L, 1177L, 1178L, 1180L, 1181L, 1183L, #
1184L, 1189L, 1190L, 1192L, 1193L, 1195L, 1196L, 1201L, 1202L, #
1204L, 1205L, 1207L, 1208L, 1213L, 1214L, 1216L, 1217L, 1219L, #
1220L, 1225L, 1226L, 1228L, 1229L, 1231L, 1232L, 1237L, 1238L, #
1240L, 1241L, 1243L, 1244L, 1249L, 1250L, 1252L, 1253L, 1255L, #
1256L, 1261L, 1262L, 1264L, 1265L, 1267L, 1268L, 1273L, 1274L, #
1276L, 1277L, 1279L, 1280L, 1285L, 1286L, 1288L, 1289L, 1291L, #
1292L, 1297L, 1298L, 1300L, 1301L, 1303L, 1304L, 1309L, 1310L, #
1312L, 1313L, 1315L, 1316L, 1321L, 1322L, 1324L, 1325L, 1327L, #
1328L, 1333L, 1334L, 1336L, 1337L, 1339L, 1340L, 1345L, 1346L, #
1348L, 1349L, 1351L, 1352L, 1357L, 1358L, 1360L, 1361L, 1363L, #
1364L, 1369L, 1370L, 1372L, 1373L, 1375L, 1376L, 1381L, 1382L, #
1384L, 1385L, 1387L, 1388L, 1393L, 1394L, 1396L, 1397L, 1399L, #
1400L, 1405L, 1406L, 1408L, 1409L, 1411L, 1412L, 1417L, 1418L, #
1420L, 1421L, 1423L, 1424L, 1429L, 1430L, 1432L, 1433L, 1435L, #
1436L, 1441L, 1442L, 1444L, 1445L, 1447L, 1448L, 1453L, 1454L, #
1456L, 1457L, 1459L, 1460L, 1465L, 1466L, 1468L, 1469L, 1471L, #
1472L, 1477L, 1478L, 1480L, 1481L, 1483L, 1484L, 1489L, 1490L, #
1492L, 1493L, 1495L, 1496L, 1501L, 1502L, 1504L, 1505L, 1507L, #
1508L, 1513L, 1514L, 1516L, 1517L, 1519L, 1520L, 1525L, 1526L, #
1528L, 1529L, 1531L, 1532L, 1537L, 1538L, 1540L, 1541L, 1543L, #
1544L, 1549L, 1550L, 1552L, 1553L, 1555L, 1556L, 1561L, 1562L, #
1564L, 1565L, 1567L, 1568L, 1573L, 1574L, 1576L, 1577L, 1579L, #
1580L, 1585L, 1586L, 1588L, 1589L, 1591L, 1592L, 1597L, 1598L, #
1600L, 1601L, 1603L, 1604L, 1609L, 1610L, 1612L, 1613L, 1615L, #
1616L, 1621L, 1622L, 1624L, 1625L, 1627L, 1628L, 1633L, 1634L, #
1636L, 1637L, 1639L, 1640L, 1645L, 1646L, 1648L, 1649L, 1651L, #
1652L, 1657L, 1658L, 1660L, 1661L, 1663L, 1664L, 1669L, 1670L, #
1672L, 1673L, 1675L, 1676L, 1681L, 1682L, 1684L, 1685L, 1687L, #
1688L, 1693L, 1694L, 1696L, 1697L, 1699L, 1700L, 1705L, 1706L, #
1708L, 1709L, 1711L, 1712L, 1717L, 1718L, 1720L, 1721L, 1723L, #
1724L, 1729L, 1730L, 1732L, 1733L, 1735L, 1736L, 1741L, 1742L, #
1744L, 1745L, 1747L, 1748L, 1753L, 1754L, 1756L, 1757L, 1759L, #
1760L, 1765L, 1766L, 1768L, 1769L, 1771L, 1772L, 1777L, 1778L, #
1780L, 1781L, 1783L, 1784L, 1789L, 1790L, 1792L, 1793L, 1795L, #
1796L, 1801L, 1802L, 1804L, 1805L, 1807L, 1808L, 1813L, 1814L, #
1816L, 1817L, 1819L, 1820L, 1825L, 1826L, 1828L, 1829L, 1831L, #
1832L, 1837L, 1838L, 1840L, 1841L, 1843L, 1844L, 1849L, 1850L, #
1852L, 1853L, 1855L, 1856L, 1861L, 1862L, 1864L, 1865L, 1867L, #
1868L, 1873L, 1874L, 1876L, 1877L, 1879L, 1880L, 1885L, 1886L, #
1888L, 1889L, 1891L, 1892L, 1897L, 1898L, 1900L, 1901L, 1903L, #
1904L, 1909L, 1910L, 1912L, 1913L, 1915L, 1916L, 1921L, 1922L, #
1924L, 1925L, 1927L, 1928L, 1933L, 1934L, 1936L, 1937L, 1939L, #
1940L, 1945L, 1946L, 1948L, 1949L, 1951L, 1952L, 1957L, 1958L, #
1960L, 1961L, 1963L, 1964L, 1969L, 1970L, 1972L, 1973L, 1975L, #
1976L, 1981L, 1982L, 1984L, 1985L, 1987L, 1988L, 1993L, 1994L, #
1996L, 1997L, 1999L, 2000L, 2005L, 2006L, 2008L, 2009L, 2011L, #
2012L, 2017L, 2018L, 2020L, 2021L, 2023L, 2024L, 2029L, 2030L, #
2032L, 2033L, 2035L, 2036L, 2041L, 2042L, 2044L, 2045L, 2047L, #
2048L, 2053L, 2054L, 2056L, 2057L, 2059L, 2060L, 2065L, 2066L, #
2068L, 2069L, 2071L, 2072L, 2077L, 2078L, 2080L, 2081L, 2083L, #
2084L, 2089L, 2090L, 2092L, 2093L, 2095L, 2096L, 2101L, 2102L, #
2104L, 2105L, 2107L, 2108L, 2113L, 2114L, 2116L, 2117L, 2119L, #
2120L, 2125L, 2126L, 2128L, 2129L, 2131L, 2132L, 2137L, 2138L, #
2140L, 2141L, 2143L, 2144L, 2149L, 2150L, 2152L, 2153L, 2155L, #
2156L, 2161L, 2162L, 2164L, 2165L, 2167L, 2168L, 2173L, 2174L, #
2176L, 2177L, 2179L, 2180L, 2185L, 2186L, 2188L, 2189L, 2191L, #
2192L, 2197L, 2198L, 2200L, 2201L, 2203L, 2204L, 2209L, 2210L, #
2212L, 2213L, 2215L, 2216L, 2221L, 2222L, 2224L, 2225L, 2227L, #
2228L, 2233L, 2234L, 2236L, 2237L, 2239L, 2240L, 2245L, 2246L, #
2248L, 2249L, 2251L, 2252L, 2257L, 2258L, 2260L, 2261L, 2263L, #
2264L, 2269L, 2270L, 2272L, 2273L, 2275L, 2276L, 2281L, 2282L, #
2284L, 2285L, 2287L, 2288L, 2293L, 2294L, 2296L, 2297L, 2299L, #
2300L, 2305L, 2306L, 2308L, 2309L, 2311L, 2312L, 2317L, 2318L, #
2320L, 2321L, 2323L, 2324L, 2329L, 2330L, 2332L, 2333L, 2335L, #
2336L, 2341L, 2342L, 2344L, 2345L, 2347L, 2348L, 2353L, 2354L, #
2356L, 2357L, 2359L, 2360L, 2365L, 2366L, 2368L, 2369L, 2371L, #
2372L, 2377L, 2378L, 2380L, 2381L, 2383L, 2384L, 2389L, 2390L, #
2392L, 2393L, 2395L, 2396L, 2401L, 2402L, 2404L, 2405L, 2407L, #
2408L, 2413L, 2414L, 2416L, 2417L, 2419L, 2420L, 2425L, 2426L, #
2428L, 2429L, 2431L, 2432L, 2437L, 2438L, 2440L, 2441L, 2443L, #
2444L, 2449L, 2450L, 2452L, 2453L, 2455L, 2456L, 2461L, 2462L, #
2464L, 2465L, 2467L, 2468L, 2473L, 2474L, 2476L, 2477L, 2479L, #
2480L, 2485L, 2486L, 2488L, 2489L, 2491L, 2492L), class = "data.frame")#
s <- "#
### lavaan syntax for family SRM#
### ROLES:'c','f','m'#
### VARID:'dep1'#
#
# Family effect:#
FE =~ 1*c_f_dep1 + 1*c_m_dep1 + 1*f_c_dep1 + 1*f_m_dep1 + 1*m_c_dep1 + 1*m_f_dep1#
#
# Actor effects:#
A.c =~ 1*c_f_dep1 + 1*c_m_dep1#
A.f =~ 1*f_c_dep1 + 1*f_m_dep1#
A.m =~ 1*m_c_dep1 + 1*m_f_dep1#
#
# Partner effects:#
P.c =~ 1*f_c_dep1 + 1*m_c_dep1#
P.f =~ 1*c_f_dep1 + 1*m_f_dep1#
P.m =~ 1*c_m_dep1 + 1*f_m_dep1#
#
# Relationship effects:#
R.c.f =~ 1* c_f_dep1#
R.c.m =~ 1* c_m_dep1#
R.f.c =~ 1* f_c_dep1#
R.f.m =~ 1* f_m_dep1#
R.m.c =~ 1* m_c_dep1#
R.m.f =~ 1* m_f_dep1#
#
# Generalized reciprocity:#
A.c ~~ P.c#
A.f ~~ P.f#
A.m ~~ P.m#
#
# Dyadic reciprocity:#
R.c.f ~~ R.f.c#
R.c.m ~~ R.m.c#
R.f.m ~~ R.m.f#
#
# Dropping factors:#
###################
 FE ~~ 0*FE#
#
c_f_dep1 ~~ 0*c_f_dep1#
c_m_dep1 ~~ 0*c_m_dep1#
f_c_dep1 ~~ 0*f_c_dep1#
f_m_dep1 ~~ 0*f_m_dep1#
m_c_dep1 ~~ 0*m_c_dep1#
m_f_dep1 ~~ 0*m_f_dep1 #
#
## Compute structured means#
# Define labels for subsequent constraints#
FE ~ .means.FE*1#
A.c ~ .means.A.c*1#
A.f ~ .means.A.f*1#
A.m ~ .means.A.m*1#
P.c ~ .means.P.c*1#
P.f ~ .means.P.f*1#
P.m ~ .means.P.m*1#
R.c.f ~ .means.R.c.f*1#
R.c.m ~ .means.R.c.m*1#
R.f.c ~ .means.R.f.c*1#
R.f.m ~ .means.R.f.m*1#
R.m.c ~ .means.R.m.c*1#
R.m.f ~ .means.R.m.f*1#
# set means of observed variables to zero#
c_f_dep1 ~ 0#
c_m_dep1 ~ 0#
f_c_dep1 ~ 0#
f_m_dep1 ~ 0#
m_c_dep1 ~ 0#
m_f_dep1 ~ 0#
#
# set constraints on means for identifiability#
.means.A.c + .means.A.f + .means.A.m == 0#
.means.P.c + .means.P.f + .means.P.m == 0#
.means.R.c.f + .means.R.c.m == 0#
.means.R.f.c + .means.R.f.m == 0#
.means.R.m.c + .means.R.m.f == 0#
.means.R.f.c + .means.R.m.c == 0#
.means.R.c.f + .means.R.m.f == 0#
.means.R.c.m + .means.R.f.m == 0#
"#
#
lavaan(	model		= s, #
		data		= dat,#
		std.ov		= FALSE,#
		orthogonal	= TRUE,#
		fixed.x 	= FALSE,#
		int.ov.free	= TRUE,#
		int.lv.free = FALSE,#
		auto.fix.first = FALSE,#
		auto.fix.single = TRUE,#
		auto.var 	= TRUE,#
		auto.cov.lv.x = TRUE,#
		auto.cov.y 	= TRUE)
