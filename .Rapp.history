setwd('/Users/Felix/Documents/LMU/Research/9 - Sonstiges/MM RandomWalk')
n <- 10000000#
bits <- ((sample(2, n, replace=TRUE)-1)*2)-1#
CS <- cumsum(bits)#
#
boundary <- 5#
sensitive <- "first"#
#
profit <- 0#
pointer <- 1#
bits2 <- bits	# CS2 flips with every rule change#
CS2 <- CS#
hits <- c()#
repeat {#
	if (sensitive=="first") {	# die "1" ist ein Gewinn#
		hit <- which(abs(CS2) > boundary)[1]#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		if (CS2[hit] > 0) sensitive <- "lower"#
		if (CS2[hit] < 0) sensitive <- "upper"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
	if (sensitive=="upper") {	# die "1" ist ein Gewinn#
		hit <- which(CS2[pointer:length(CS2)] > boundary)[1] + pointer - 1#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		sensitive <- "lower"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
	if (sensitive=="lower") {	# die "-1" ist ein Gewinn#
		hit <- which(CS2[pointer:length(CS2)] < -boundary)[1] + pointer - 1#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		sensitive <- "upper"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
}#
print("Mean of random process:")#
CS[length(CS)]/length(CS)#
t.test(bits, mu=0)#
#
print("Mean of profit:")#
CS2[length(CS2)]/length(CS2)#
#
firstdiff <- function(x) {#
   shifted <- c(0,x[1:(length(x)-1)])#
   x-shifted#
   }#
bits2 <- firstdiff(CS2)#
t.test(bits2, mu=0)
n <- 10000000#
bits <- ((sample(2, n, replace=TRUE)-1)*2)-1#
CS <- cumsum(bits)#
#
boundary <- 5#
sensitive <- "first"#
#
profit <- 0#
pointer <- 1#
bits2 <- bits	# CS2 flips with every rule change#
CS2 <- CS#
hits <- c()#
repeat {#
	if (sensitive=="first") {	# die "1" ist ein Gewinn#
		hit <- which(abs(CS2) > boundary)[1]#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		if (CS2[hit] > 0) sensitive <- "lower"#
		if (CS2[hit] < 0) sensitive <- "upper"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
	if (sensitive=="upper") {	# die "1" ist ein Gewinn#
		hit <- which(CS2[pointer:length(CS2)] > boundary)[1] + pointer - 1#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		sensitive <- "lower"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
	if (sensitive=="lower") {	# die "-1" ist ein Gewinn#
		hit <- which(CS2[pointer:length(CS2)] < -boundary)[1] + pointer - 1#
		if (is.na(hit)) {#
			break;#
		}#
		hits <- c(hits, hit)#
		sensitive <- "upper"#
		pointer <- hit#
		# ab jetzt gilt die neue Regel: umpolen#
		bits2 <- -bits2#
		CS2[hit:length(CS2)] <- CS2[hit-1] + cumsum(bits2[pointer:length(bits2)])#
	}#
}#
print("Mean of random process:")#
CS[length(CS)]/length(CS)#
t.test(bits, mu=0)#
#
print("Mean of profit:")#
CS2[length(CS2)]/length(CS2)#
#
firstdiff <- function(x) {#
   shifted <- c(0,x[1:(length(x)-1)])#
   x-shifted#
   }#
bits2 <- firstdiff(CS2)#
t.test(bits2, mu=0)
Start-up:#
library("ProjectTemplate")#
setwd("/Users/Felix/Documents/LMU/Research/1 - Konkret in Arbeit/BirkDiary")#
#
sourceDir <- function(path, trace = TRUE, ...) {#
   for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {#
      if(trace) cat(nm,":")           #
      source(file.path(path, nm), ...)#
      if(trace) cat("\n")#
   }#
}#
sourceDir("helpers")#
#
load.project()
9120+228
9348*1.5
9120/9
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/data')
dat <- read.csv("Eicherlsheim2011.csv")
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/data')
dat <- read.csv("Eichelsheim2011.csv")
dat
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/data')
dat <- read.csv2("Eichelsheim2011.csv")
dat
str(dat)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/data')
dat <- read.table("Eichelsheim2011.csv")
dat
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::document()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::document()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::check()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::install()
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
data(negInt)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
str(negInt)
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E1 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=negInt)
E1
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E2 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=negInt, group="group")
E2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/R')
' @S3method print fSRM#
#
print.fSRM <-#
function(x, digits=3, ...) {#
	# Print model summary for all groups#
	## The model for 4 members must have 31 free parameters and 47 df!#
	cat("----------------\n")#
	cat(paste("SRM with roles (latent) (Roles: ", paste(x$roles, collapse=", "), sep=""), "; DVs = ", x$var.id, ") :\n----------------\n")#
	cat("\nModel summary:\n----------------\n")#
	show(x$fit)#
	cat("\nModel Fit:\n----------------\n")#
	FIT <- fitmeasures(x$fit)#
	cat(paste("Chi2 (df=", FIT["df"], ") = ", round(FIT["chisq"], digits), ", p = ", round(FIT["pvalue"], digits), "\n", sep=""))#
	cat(paste("CFI = ", round(FIT["cfi"], digits), "\n", sep=""))#
	cat(paste("TLI / NNFI = ", round(FIT["tli"], digits), "\n", sep=""))#
	cat(paste("RMSEA = ", round(FIT["rmsea"], digits), " [", round(FIT["rmsea.ci.lower"], digits), ";", round(FIT["rmsea.ci.upper"], digits), "]", "; Test of close fit: p(data | true value == .05) = ", round(FIT["rmsea.pvalue"], digits), "\n", sep=""))#
	if (is.null(x$group)) {#
		print.singlegroup(x, group=1, digits=digits)#
	} else {#
		# print stats for each group#
		for (g in 1:length(x$groupnames)) {#
			cat("\n\n#####################################\n")#
			cat(paste0("Statistics for group", g, "\n"))#
			cat("#####################################\n")#
			print.singlegroup(x, group=g, digits=digits)#
		}#
		if (x$means == TRUE) {#
			cat("\n\n#####################################\n")#
			cat(paste0("Difference of means between groups (", x$groupnames[1], "-", x$groupnames[2], ")\n"))#
			cat("#####################################\n")#
			MD <- getCor(x, label=".meanDiff.", group=0)#
			colnames(MD)[5] <- "diff"#
			print(MD[, c(2, 5, 4, 6:9)])#
			cat("\n\n#####################################\n")#
			cat(paste0("Difference of variances between groups (", x$groupnames[1], "-", x$groupnames[2], ")\n"))#
			cat("#####################################\n")#
			MD <- getCor(x, label=".varDiff.", group=0)#
			colnames(MD)[5] <- "diff"#
			print(MD[, c(2, 5, 4, 6:9)])#
		}#
	}#
}#
print.singlegroup <-#
function(x, group=1, digits=3) {#
	eff <- as.data.frame(parameterEstimates(x$fit))#
	eff$f <- paste(eff$lhs, eff$op, eff$rhs)#
	# SS = standardized solution: get correlation for that#
	SS <- getCor(x, ops=c("~~", "~"), group=group)#
#
	cat("\n\nVariance decomposition:\n----------------\n")#
	T <- varComp(x, group=group)#
	T[, -1] <- round(T[, -1], digits)#
	print(T)#
	cat("\n\nRelative variance decomposition:\n----------------\n")#
	print(round(percTable(x, group=group)$stand))#
	if (!x$drop %in% c("actor", "partner", "GR")) {#
		cat("\n\nGeneralized reciprocity (actor-partner covariances):\n----------------\n")#
		GR <- getGR(x, group=group)#
		print(GR, row.names=TRUE)#
	}#
	#cat("\n\nDyadic reciprocity (relationship covariances): Mean r =", round(meanNA(GR$COR), digits),"(out of bounds estimates set to NA)\n----------------\n")#
	DR <- getDR(x, group=group)#
	cat("\n\nDyadic reciprocity (relationship covariances): Mean r =", round(meanNA(DR$r), digits),"(out of bounds estimates set to NA)\n----------------\n")#
	print(DR, row.names=TRUE)#
	if (length(x$IGSIM) > 0) {#
		cat("\n\nIntragenerational similarity:\n----------------\n")#
		igsim <- SS[grepl("IGSIM", SS$label), ][, -2]#
		print(igsim)#
	}#
	if (x$self == TRUE) {#
		AS <- data.frame()#
		for (t in x$roles) {#
			if (x$selfmode == "cor") {F <- paste(style$actor, ".", t, " ~~ ", style$self, ".", t, sep="")}#
			if (x$selfmode == "kq") {F <- paste(style$self, ".", t, " ~ ", style$actor, ".", t, sep="")}#
			AS0 <- SS[SS$f == F, ]#
			AS0$comment <- ""#
#
			# get Variance of components --> if that is < min.p, correlation is not reliable!#
			SD1 <- SS[SS$f == paste(style$partner, ".", t, " ~~ ", style$partner, ".", t, sep=""), ]#
			SD2 <- SS[SS$f == paste(style$self, ".", t, " ~~ ", style$self, ".", t, sep=""), ]#
			if (is.na(SD1$pvalue)) SD1$pvalue <- 1#
			if (is.na(SD2$pvalue)) SD2$pvalue <- 1#
#
			if (SD1["pvalue"] > x$min.p | SD2["pvalue"] > x$min.p) {#
				AS0$COR <- NA_real_#
				AS0$comment <- paste("One of the variance components has p <", x$min.p)#
			}#
			if (AS0$pvalue > x$min.p) {#
				AS0$COR <- NA_real_#
				AS0$comment <- paste("Covariance estimate has p <", x$min.p)#
			}#
#
			AS <- rbind(AS, AS0)#
		}#
		cat("\n\nAssumed similarity: Mean r =", round(meanNA(AS$COR), digits),"(out of bound estimates set to zero)\n----------------\n")#
		print(AS,row.names=TRUE)#
		SO <- data.frame()#
		for (t in x$roles) {#
			if (x$selfmode == "cor") {F <- paste(style$partner, ".", t, " ~~ ", style$self, ".", t, sep="")}#
			if (x$selfmode == "kq") {F <- paste(style$self, ".", t, " ~ ", style$partner, ".", t, sep="")}#
			SO0 <- SS[SS$f == F, ]#
			SO0$comment <- ""#
#
			# get Variance of components --> if that is < min.p, correlation is not reliable!#
			SD1 <- SS[SS$f == paste(style$partner, ".", t, " ~~ ", style$partner, ".", t, sep=""), ]#
			SD2 <- SS[SS$f == paste(style$self, ".", t, " ~~ ", style$self, ".", t, sep=""), ]#
			if (is.na(SD1$pvalue)) SD1$pvalue <- 1#
			if (is.na(SD2$pvalue)) SD2$pvalue <- 1#
#
			if (SD1["pvalue"] > x$min.p | SD2["pvalue"] > x$min.p) {#
				SO0$COR <- NA_real_#
				SO0$comment <- paste("One of the variance components has p <", x$min.p)#
			}#
			if (SO0$pvalue > x$min.p) {#
				SO0$COR <- NA_real_#
				SO0$comment <- paste("Covariance estimate has p <", x$min.p)#
			}#
#
			SO <- rbind(SO, SO0)#
		}#
		SO$COR <- as.numeric(SO$COR)#
		cat("\n\nSelf-Other agreement: Mean r =", round(meanNA(SO$COR), digits),"(out of bound estimates set to NA)\n----------------\n")#
		print(SO, row.names=TRUE)#
	}#
	if (x$means == TRUE) {#
		cat("\n\nMean structure\n----------------\n")#
		if (is.null(x$group)) {#
			MS <- eff[grepl(".means.", eff$label, fixed=TRUE), c(1, 5:10)]#
		} else {#
			MS <- eff[grepl(paste0(".means", x$groupnames[group], "."), eff$label, fixed=TRUE), c(1, 6:11)]#
		}#
		colnames(MS) <- c("factor", "estimate", "se", "z", "p.value", "ci.lower", "ci.upper")#
		MS[, -1] <- round(MS[, -1], digits)#
		rownames(MS) <- NULL#
		print(MS)#
	}#
}
E2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::install()
E2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
sourceDir <- function(path, trace = TRUE, ...) {#
   for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {#
      if(trace) cat(nm,":")           #
      source(file.path(path, nm), ...)#
      if(trace) cat("\n")#
   }#
}#
#
sourceDir("../R")#
library(lavaan)#
library(plyr)#
library(reshape2)#
library(ggplot2)#
#
# alternatively: load from GitHub#
#library(devtools)#
#install_github("fSRM", "felice303")#
#library(fSRM)
E2
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E3 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=negInt, group="group", means=TRUE, delta=TRUE)#
E3
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst/Eichelsheim')
E3 <- fSRM(neg1/neg2 ~ actor.id*partner.id | family.id, data=negInt, group="group", means=TRUE, diff=TRUE)#
E3
setwd('/Users/Felix/Documents/R/Funktionen/GitHub/fSRM/inst')
setwd("/Users/Felix/Documents/R/Funktionen/GitHub/fSRM")#
devtools::install()
